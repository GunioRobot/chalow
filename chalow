#!/usr/bin/env perl
# $Id: chalow,v 1.78 2004/02/16 12:30:29 yto Exp $
#
# chalow - CHAngeLog On the Web - convert ChangeLog to HTML files
#
# This is free software with ABSOLUTELY NO WARRANTY.
# 無償・無保証・著作権放棄 (see http://nais.to/~yto/doc/zb/0002.html)
#
# chalow ホームページ: http://nais.to/~yto/tools/chalow

use strict;
use Getopt::Long;
use POSIX qw(strftime);
use Jcode;
use Time::Local;		# for 曜日

# 現在時刻の獲得
my $what_time_is_it_now = strftime "%Y-%m-%d %H:%M", localtime;
my $dcdate = strftime "%Y-%m-%dT%H:%M:%S+09:00", localtime;

### ユーザ設定項目 obsolete

# 自分の home page URL
my $home_page_url = "http://nais.to/~yto/tools/chalow/";
# 自分のホームーページの呼び名
my $home_page_name = "chalow home page";


### ユーザ設定項目
## デフォルト設定 (ユーザ設定ファイル名が指定されてないとき)
# 日記の名前
my $changelog_name = "ChangeLog";
# 自動文字列置換
my $auto_replace = '';
# CSS ファイル
my $css_file;
# インデックスページ(index.html)で最近何日分を表示するか
my $opt_topn = 5;
# 日付の後に曜日(Mon, Tue, ...)を表示するか (1:yes or 0:no)
my $show_day_of_week = 1;
# 月ページで、日付を降順 (新しい日付が上) で表示するか (1:yes or 0:no)
my $reverse_order_days = 0;

# インデックスページのテンプレート
my $index_page_template = << "___INDEX_PAGE_TEMPLATE"
<a href="$home_page_url">$home_page_name</a>
<h1>$changelog_name</h1>
<p>最終更新時刻: CLLASTUPDATE</p>
<p class="calendar">MONTHPAGELIST</p>
LATESTDAYS
<p>以上、最近 NDAYS 日分</p>
<p class="calendar">MONTHPAGELIST</p>
<a href="$home_page_url">$home_page_name</a>
___INDEX_PAGE_TEMPLATE
    ;
# 月ページのテンプレート
my $month_page_template = << "___MONTH_PAGE_TEMPLATE"
CLNAVI <a href="index.html">最新</a>
 / <a href="$home_page_url">$home_page_name</a>
<h1>$changelog_name YEARMONTH</h1>
<p class="calendar">MONTHPAGELIST</p>
<p class="calendar">DAYLIST</p>
DAYSINTHEMONTH
<p class="calendar">DAYLIST</p>
<p class="calendar">MONTHPAGELIST</p>
CLNAVI <a href="index.html">最新</a>
 / <a href="$home_page_url">$home_page_name</a>
___MONTH_PAGE_TEMPLATE
    ;
# 日ページのテンプレート
my $day_page_template = << "___DAY_PAGE_TEMPLATE"
CLNAVI <a href="index.html">最新</a>
 / <a href="YEARMONTH.html">今月の一覧</a>
 / <a href="$home_page_url">$home_page_name</a>
<h1>$changelog_name YEARMONTHDAY</h1>
<p class="calendar"><a href="YEARMONTH.html">YEARMONTH</a> / DAYLIST</p>
DAYSINTHEMONTH
<p class="calendar"><a href="YEARMONTH.html">YEARMONTH</a> / DAYLIST</p>
<p class="calendar">MONTHPAGELIST</p>
CLNAVI <a href="index.html">最新</a>
 / <a href="YEARMONTH.html">今月の一覧</a>
 / <a href="$home_page_url">$home_page_name</a>
___DAY_PAGE_TEMPLATE
    ;
# カテゴリページのテンプレート
my $cat_page_template = << "___CAT_PAGE_TEMPLATE"
<a href="index.html">最新</a>
<h1>カテゴリ[CATEGORYNAME] - $changelog_name</h1>
CATEGORYCONT
<a href="index.html">最新</a>
___CAT_PAGE_TEMPLATE
    ;
# インデックスページの HTML ヘッダに追加したいもの (favicon.ico など)
my $index_page_head_plus = "";
# 月ページの HTML ヘッダに追加したいもの
my $month_page_head_plus = "";
# 日ページの HTML ヘッダに追加したいもの
my $day_page_head_plus = "";

# タブによるインデントをなくすか (1:なくす or 0:そのまま)
my $no_indent = 0;
# 表示するとき引用記号 ('>' or '|') を消すか (1:YES, 0:NO)
my $remove_quote_mark = 0;

# 日付一覧をカレンダー表示にするか (1:YES, 0:NO)
my $calendar_style = 0;

# アイテムヘッダーのフォーマットをどうするか
# (0:"* HOGE:", 1:"* HOGE", 2:"HOGE:",3:"HOGE")
my $item_header_style = 0;
# item header に h3 タグを足すか (1:YES, 0:NO) - tDiary との互換性のため
my $use_h3_for_item_header = 0;
# item header の先頭の記号にアンカーをつけるか (1:YES, 0:NO)
my $use_item_anchor = 1;
# item header の先頭の記号の指定
# 『日記のセクションの先頭(サブタイトルの行頭)に挿入される、リンク用の
# アンカー文字列を指定します。なお「<span class="panchor">_</span>」を
# 指定すると、テーマによっては自動的に画像アンカーがつくようになりま
# す。』(tDiary の skel/conf.rhtml より)
my $item_header_mark = '<span class="sanchor">*</span>';

# ツッコミ機能を使用するか (1:YES, 0:NO)
my $use_tukkomi = 0;
# ツッコミのテンプレート = <div class="comment">...</div> の中味。
# TUKKOMI_DATE はそのエントリの日付 (例: 2003-06-25) に変換される
my $tukkomi_template = "";
# 他の年の同じ日付 (月日) へのリンクを張るか (1:YES, 0:NO)
my $same_date_jump = 1;
# 各アイテムに記述者名を表示するか (1:YES, 0:NO)
my $show_author_name = 0;

# RSS を出力するか (1:YES, 0:NO)
my $output_rss = 1;
# 日記の説明 for RSS : 例: "日々のあれこれ。"
my $changelog_description = "";
# ChangeLog を公開する URL (絶体 URL を強く推奨) - RSS に必要
my $clog_url = "http://nais.to/~yto/clog/";

# 検索用ファイル (itemlist) を作るか (1:YES, 0:NO)
my $output_itemlist = 1;
# JavaScript ファイルとして出力する日数
my $latest_titles_num = 10;

# 日ごとにページを作るか (0:NO, 1:YES, 2:YES&月ページはヘッダのみ)
my $day_page_mode = 0;

### chalow 普及のため HTML の一番下にリンクを表示する。できれば消さないで。
my $signature = qq(<p class="footer">Powered by 
<a href="http://nais.to/~yto/tools/chalow/">chalow</a></p>);

### コマンドライン引数
Getopt::Long::Configure('bundling');
my ($opt_topn_tmp, $outputdir, $quiet_mode, $opt_css_file, $debug_mode,
    $update_by_size, $conf_file, $stop_date);
my $gor = GetOptions('n|top-n=n'   => \$opt_topn_tmp,
		     'o|output-dir=s'   => \$outputdir,
		     'c|configure-file=s' => \$conf_file,
		     's|stop-date=s' => \$stop_date,
		     'u|update-by-size' => \$update_by_size,
		     'C|css=s' => \$opt_css_file,
		     'q|quiet' => \$quiet_mode,
		     'd|debug' => \$debug_mode);

if (@ARGV == 0 or $gor == 0) {
    print << "USAGE";
usage: chalow [options] <file> [file]...
    -n, --top-n=NUM             write NUM days to "index.html"
    -o, --output-dir=DIR        directory to output
    -c, --configure-file=FILE   configure file (default "cl.conf")
    -s, --stop-date=DATE        date to stop processing
    -u, --update-by-size        overwrite only if sizes are different
    -C, --css=FILE              css file
    -q, --quiet                 quiet mode
    -d, --debug                 debug mode
USAGE
    ;
    exit;
}

# ユーザ設定ファイルの読み込み (ファイル名が指定されてたときのみ)
if ($conf_file ne "") {
    open(CONF, $conf_file) or die "Can't open $conf_file : $!\n";
    binmode(CONF);
    my $conf = join('', <CONF>);
    $conf = Jcode->new($conf)->euc;
    eval $conf;
    die qq(error in "$conf_file" (obsolete variable?): $@\n) if ($@);
}

$outputdir = "." if (not defined $outputdir);

# ユーザ設定ファイルよりコマンドライン指定を優先する処理
$opt_topn = $opt_topn_tmp if (defined $opt_topn_tmp);
$css_file = $opt_css_file if (defined $opt_css_file);

# ツッコミ機能を使う 
if ($use_tukkomi == 1) {	# 廃止予定。各テンプレートへ移動。
    my $s = qq(<script language="JavaScript" type="text/javascript" 
src="kuttukibbs.js"></script>
<script language="JavaScript" type="text/javascript">
function CallFunc() {KbShowCommentShort(num, 5, 50)}</script>);

    $day_page_head_plus .= $s;
    $month_page_head_plus .= $s;
    $index_page_head_plus .= $s;
}

# 処理停止日付: 文字列だったものを数値にする。後で数値として日付の比較
# に使うから。
$stop_date =~ s/-//g;

my $clog_url_pref = $clog_url;
$clog_url_pref =~ s!/[^/]+html?$!/!;
$clog_url_pref .= "/" unless ($clog_url_pref =~ m!/$!);
# SPEC:       $clog_url                    $clog_url_pref
# http://nais.to/~yto/clog/           -> http://nais.to/~yto/clog/
# http://nais.to/~yto/clog/index.html -> http://nais.to/~yto/clog/
# http://nais.to/~yto/clog            -> http://nais.to/~yto/clog/

my %month_page;			# 月別のページ
my %category_item;		# カテゴリ別ページ用 item
my %inside_ref;			# 日付リンクによるリファラー

my %entry_statistics;
# {"ymd"} : 日付 (年-月-日) の重複 (for 複数人利用)
# {"ym"} : 各年月に含まれている日付エントリ数
# {"md"} : 同じ月日を持つ年 for same date jump

my %all_entries;		# 全エントリを格納
# {XXXX-XX-X}{"eh"} - エントリヘッダ
# {XXXX-XX-X}{1,2,3,...}{"h"} - アイテムヘッダ
# {XXXX-XX-X}{1,2,3,...}{"c"} - 中味
# {XXXX-XX-X}{1,2,3,...}{"cat"} - カテゴリ
# {XXXX-XX-X}{1,2,3,...}{"a"} - 書いた人
# {XXXX-XX-X}{1,2,3,...}{"message-top"} - pragma
# {XXXX-XX-X}{1,2,3,...}{"message-bottom"} - pragma


my $all;
for my $fname (@ARGV) {
    print "reading \"$fname\"\n" if (!defined $quiet_mode);

    ### クリーニングのためにChangeLogファイル一気に読み込む
    open(F, $fname) || die "file open error $fname : $!";
    binmode(F);
    my $tmp .= join('', <F>);
    close(F);

    ### 末尾メモ領域の削除
    # 行頭から __DATA__ で始まる行以降は無視する。
    $tmp =~ s/^\t?__DATA__.*$/\n/gsm;

    $all .= $tmp."\n";
}

$all = Jcode->new($all)->euc; # 文字コードを euc にしておく
my @lines;
clean_changelog(\@lines, \$all); # ChangeLog をあらかじめクリーニング
foreach (@lines) {
    next if (/^$/);
    my ($ymd, $y, $m, $d) = (/^((\d+)-(\d+)-(\d+))/);
    $entry_statistics{ymd}{$ymd}++;
    $entry_statistics{ym}{$y."-".$m}++;
    $entry_statistics{md}{$m."-".$d}{$y} = 1;
}

### 月別一覧を作成
my $month_page_list = make_month_page_list(\%{$entry_statistics{ym}}); 

### クリーニングされたChangeLogを処理
{   
    foreach (@lines) {
	next if (/^$/);
	my ($day) = (/^(\d+-\d+-\d+)/);

	### stop date
	# 月別一覧などに影響がでる。DEBUG 用ですな。
	if ($stop_date != 0) {
	    $day =~ (/^(\d+)-(\d+)-(\d+)/);
	    my $cdate = $1 * 10000 + $2 * 100 + $3;
	    if ($stop_date > $cdate) {
		next;
	    }
	}

	# エントリをパーズして、文字列置き換え、格納
	parse_entry($_, \%{$all_entries{$day}});
    }
}

### HTML 生成のためのループ
foreach my $ymd (sort keys %all_entries) {

    ### entry header
    my $ent_h = make_entry_header_html($all_entries{$ymd}{eh}, $ymd);

    ### item
    my @items;
    foreach my $i (sort {$b <=> $a} keys %{$all_entries{$ymd}}) {
	next if ($i !~ /^\d/);

	my $ih = make_item_header_html($all_entries{$ymd}{$i}{h}, $ymd."-".$i);

	### カテゴリ
	my $catp = $all_entries{$ymd}{$i}{cat};
	if (defined $catp) {
	    $ih .= " ".
		join("", map 
		     {qq([<a href="@{[get_category_filename($_)]}">$_</a>])} 
		     @$catp);
	}

	### 日付リンクによるリファラー
	my @inside_refs = get_inside_ref("$ymd-$i");

	### item の基礎情報
	my $item_url = datestr2url("$ymd-$i"); $item_url =~ s/\#/%23/;
	my $item_id = $ymd.$i; $item_id =~ s/-//g; # Ex. "200309241"

	### item の組み上げ
	# tmpl {ih=>$ih,cont=>$c,author=>$a,refs=>\@r,id=>., url=>.}
	my $this_item = << "EACHITEM"
<div class="section">
@{[($use_h3_for_item_header == 1) ? 
qq(<h3 class="subtitle">$ih</h3><p>) : "<p>$ih"]}
$all_entries{$ymd}{$i}{c}
</p>
@{[($show_author_name == 1) ? 
qq(<div class="itemauthor"><span>$all_entries{$ymd}{$i}{a}</span></div>) : ""]}
@{[(@inside_refs > 0) ?
"<div class=\"referer\"><span>Referrer (Inside): ".
join(" ", @inside_refs)."</span></div>" : ""]}
</div>
<!--eos-->
EACHITEM
    ;
	foreach (@$catp) {
	    push @{$category_item{$_}}, {eh=>$ent_h, cont=>$this_item};
	}
	push @items, $this_item;
    }

    my ($y, $m, $d) = ($ymd =~ /^(\d{4})-(\d\d)-(\d\d)$/);

    ### 他の年の同じ日付 (月日) へのリンクを張る
    my @same_dates;
    if ($same_date_jump == 1) {
	if (defined $entry_statistics{md}{"$m-$d"}) {
	    my @ys = sort keys %{$entry_statistics{md}{"$m-$d"}};
#	    print join(",",@ys)," $ymd\n";
	    @same_dates = map {"<a href=\"".datestr2url("$_-$m-$d").
				   "\">$_</a>"} grep {$_ != $y} @ys;
	}
    }

    ### 日付リンクによるリファラー
    my @inside_refs = get_inside_ref("$ymd");

    ### pragma item
    my $message_top = $all_entries{$ymd}{"message-top"};
    my $message_bottom = $all_entries{$ymd}{"message-bottom"};

    ### entry の基礎情報
    my $entry_url = datestr2url($ymd); $entry_url =~ s/\#/%23/;
    my $entry_id = $ymd; $entry_id =~ s/-//g; # Ex. "20030924"

    ### ツッコミ機能を使う
    my $tukkomi;
    if ($use_tukkomi == 1) {
	$tukkomi = $tukkomi_template;
	$tukkomi =~ s/TUKKOMI_DATE/$entry_url/g;
	$tukkomi =~ s/DATE_ID/$entry_id/g;
    }

    ### エントリの組み上げ
    $month_page{"$y-$m"}{$ymd} = << "DAYENTRY"
<div class="day">
<h2><span class="date">$ent_h</span></h2>
<div class="body">
@{[(defined $message_top) ? $message_top : ""]}
@{[(defined @same_dates) ? 
   qq(<div class="calendar">).join(" ", @same_dates)."</div>" : ""]}
@{[join('', @items)]}
@{[(@inside_refs > 0) ?
"<div class=\"referer\"><span>Referrer (Inside): ".
join(" ", @inside_refs)."</span></div>" : ""]}
@{[(defined $message_bottom) ? $message_bottom : ""]}
@{[(defined $tukkomi) ? $tukkomi : ""]}
</div>
</div>
DAYENTRY
    ;
}

### HTML ファイルの出力
write_index_page();
write_month_page();
write_day_page() if ($day_page_mode);
#write_item_page() if ($item_page_mode);
write_category_page();

write_rss_file() if ($output_rss); # RSS ファイルを作る
write_itemlist_file() if ($output_itemlist); # 検索用ファイル(itemlist)を作る 
write_js_file();		# JavaScript ファイル を作る

print "done.\n" if (!defined $quiet_mode);

exit;


### エントリをパーズして格納する
sub parse_entry {
    my ($e, $enthashp) = @_;

    # (1) entry header とそれ以外に分解
    die "parse error" unless ($e =~ /\A(\d{4}-\d\d-\d\d.+?\n)(.+)\Z/sm);

    my ($eh, $items) = ($1, $2);

    # (2) entry header のパーズ
    my ($ymd, $y, $m, $d, $user) 
	= ($eh =~ /^((\d\d\d\d)-(\d\d)-(\d\d))(?:.*?\s\s)(.+)?/);
    $user =~ s/</&lt;/g;

    # (3) 格納
    $enthashp->{eh} = $ymd;	# ハッシュに格納

    # (4) 個々の item に分解し、各 item ごとに処理
    my @itemlist;
    while ($items =~ /^(\* .+?\n(?=\s*(\* |\Z)))/gsm) {
	unshift @itemlist, $1;
    }

    my $iid = 0;		# Item ID
    $entry_statistics{ymd}{$ymd}--;
    $iid += $entry_statistics{ymd}{$ymd} * 100; # for 複数人利用
    for (my $i = 0; $i < @itemlist; $i++) {
	my $item = $itemlist[$i];

	# (4.1) プラグマ item の処理
	if ($item =~ /^\* (message-top|message-bottom):(.*)\Z/sm) { 
	    $enthashp->{$1} = $2;
	    next;
	}

	# (4.2) item header とそれ以外に分解
	my ($ih, $c) = ($item =~ /^\* (.+?):(\s.*)\Z/sm);

	# (4.3) item header の処理
	my @cat;
	if (defined $ih) {
	    if ($ih =~ s/\s*\[(.+)\]$//) { # カテゴリ
		@cat = split(/\s*\]\s*\[\s*/, $1);
	    }
	} else {
	    $c = $item;
	    $c =~ s/^\* //;
	}

	# (4.4) item の中味の処理
	if ($use_h3_for_item_header == 1) {
	    $c =~ s/^\s*\n//;
	}
	
	# (4.5) 格納
	$iid++;

	# 日付リンク情報の格納
	while ($c =~ /\[((\d\d\d\d-\d\d)-\d\d(-\d+)?)\]/g) {
	    $inside_ref{$1}{"$ymd-$iid"}++;
	}

	# ハッシュに格納
	$enthashp->{$iid}{h} = okikae($ih);
	$enthashp->{$iid}{c} = okikae($c);
	$enthashp->{$iid}{a} = $user if (defined $user);
	@{$enthashp->{$iid}{cat}} = @cat if (defined @cat);
    }

    return;
}


### 文字列の置き換え
sub okikae {
    local ($_) = @_;	

    escape_string(\$_);

    s/&/&amp;/go;
#    s/>/&gt;/go;		# > が &.. になると、URL とか引用のマッチ狂う
#    s/"/&quot;/go;		# ";
    ### "<" は置き換える。
    s|<(/?[a-z!]+)|&lt;$1|gio;
#    s|<(/?[a-z]+)|&lt;$1|gio;	# コメント (<!-- -->) をのこしたい場合はこれ
    # カスタマイズのヒント: <s></s> を残す→ 
    # s|<(/?[a-rt-z]+)|&lt;$1|gi; <b> を残す→ 
    # s|<(/?[ac-z]+)|&lt;$1|gi; (副作用 = <br> なども残る)

    ### 文字修飾と水平線。Hiki の記法を採用。
    s!'''(.+?)'''!<strong>$1</strong>!gms;
    s!''(.+?)''!<em>$1</em>!gms;
    s!==(\S.+?)==!<s>$1</s>!gms;
    s!^\-{4}!<hr>!gms;

    ### URL。Hiki の記法を採用。
    s!\[\[(.+?)\s*\|\s*(.+?)\]\]!get_link_str($1, $2)!gmse;

    ### 引用 (quote): ">>" と "<<" で囲む
    s!^>>\n!<blockquote>!gm;
    s!^<<\n!</blockquote>!gm;

    ### 引用 (quote): "| ..." か "> ..."
    if ($remove_quote_mark == 1) {
	my $a;
	s!((^((\||>)[^\n]*)\n)+)!'<blockquote>'.($a = $1,
	    $a =~ s{^(\||>)\s?}{}gm, $a).'</blockquote>'!gme;
    } else {
	s!((^((\||>)[^\n]*)\n)+)!<blockquote>$1</blockquote>!gmx;
    }

    {				# 昔の画像貼り付け記法 (しばらく残す)
	### 画像張り付け
	# image : [IMG:image/2000-06-20-08-32-57.m.jpg]
	s!\[IMG:([^\]\s]+)\]!get_link_str("画像", $1);die!ge;
	### リンク付き画像張り付け
	# サムネイルと拡大画像などに
	# image : [IMG:image/hello-s.jpg image/hello.jpg]
	# image : [IMG:image/hello-s.jpg http://example.com/hoge.html]
	s!\[IMG:([^\]\s]+)\s+([^\]\s]+)\]!get_link_str($1, $2);die!gesm;
    }

    ### 日付で参照リンク
    # date ref : [YYYY-MM-DD]
    $_ = datestr2anchor($_);

    ### URL表記を href で
    # URL : http://....
    # 正規表現は http://www.din.or.jp/~ohzaki/perl.htm#httpURL より。
    # バックスラッシュを用いたURL中での改行に対応 021025
    #my $URLCHARS = "[-_.!~*'()a-zA-Z0-9;/?:@&=+,%\#\$]";
    my $URLCHARS = "[-_.!~*'a-zA-Z0-9;/?:@&=+,%\#\$]";
    my $URLDELIM = "\\\\\\n *";
    s{(?<![\"\=|])((s?https?|ftp)://($URLCHARS+)($URLDELIM($URLCHARS+))*)}
    {'<a href="'.join('', split(/$URLDELIM/, $1)).'">'.
	 join('', split(/\\/, $1)).'</a>'}gem; #")};

    ### 行頭のスペースは &nbsp; に置き換える。
    s!^( +)!{"&nbsp;" x length($1)}!gme;
    s!^(</?blockquote>)( +)!{"$1" . ("&nbsp;" x length($2))}!gme;

    ### 自動文字列置換適用
    eval $auto_replace;

    # タブによるインデントを消さない場合 (一度消したのをまた追加する)
    if ($no_indent == 0) {
	s!^(</?blockquote>|)!$1\t!gsm;
    }

    # 各行の行末に <br> を付ける
    # memo: 昔は pre で囲んでいたが、v0.23 からやめた
#print "1[$_]\n";
    s!$!<br>!gsm;
    s!<br>$!!;
#print "2[$_]\n";

    unescape_string(\$_);	# プラグイン呼び出しも行なう

    s!</pre><br>!</pre>!g;	# ad hoc

    return $_;
}


### カテゴリ別ページ(ex: cat_life.html)を作る。
sub write_category_page {
    my @cat_list = keys %category_item;
    foreach my $catname (@cat_list) {

	my $template = $cat_page_template;

	my $contentp = $category_item{$catname};
	my $content = 
	    join("\n", map {<< "ITEM"
<div class="day"><h2><span class="date">$_->{eh}</span></h2>
<div class="body">$_->{cont}</div></div>
ITEM
    ;
			} sort {$b->{eh} cmp $a->{eh}} @{$contentp});

	# 日へのリンク (日付一覧)
	my ($ym) = ($what_time_is_it_now =~ /^(\d+-\d+)/);
	my $day_list = make_day_list_str($ym);

	### 内部置き換え文字列
	$template =~ s!CLLASTUPDATE!$what_time_is_it_now!g;
	$template =~ s!CATEGORYNAME!$catname!g;
	$template =~ s!CATEGORYCONT!$content!g;
	$template =~ s!YEARMONTH!$ym!g;
	$template =~ s!DAYLIST!$day_list!g;

	my $ostr = << "OSTR"
<html lang="ja"><head><title>$catname / $changelog_name</title>
<meta http-equiv="Content-Type" content="text/html;charset=EUC-JP">
@{[(defined $css_file) ? 
qq(<link rel=stylesheet href="$css_file" media=all>) : ""]}
</head><body><div>
$template
$signature
</div></body></html>
OSTR
    ;
	my $fname = "$outputdir/".get_category_filename($catname);
	output_to_file($fname, \$ostr);
    }
}


### 日ページ(ex: 2001-01-01.html)を作る。
sub write_day_page {
    my @day_list = reverse sort keys %all_entries;

    for (my $idx = 0; $idx < @day_list; $idx++) {

	my $ymd = $day_list[$idx];

	# 日ページ移動ナビ (前後の日ページへのリンク)
	my $navi = "";
	$navi .= qq(<a href="$day_list[$idx + 1].html">&lt;&lt;&lt;</a> )
	    if ($idx < @day_list - 1);
	$navi .= qq(<a href="$day_list[$idx - 1].html">&gt;&gt;&gt;</a> )
	    if ($idx > 0);

	# 日へのリンク (日付一覧)
	my ($ym) = ($ymd =~ /^(\d+-\d+)/);
	my $day_list = make_day_list_str($ym);

	my $template = $day_page_template;

	my $content = $month_page{$ym}{$ymd};
	$content =~ s|<h2>.+?</h2>||sm;

	### 内部置き換え文字列
	$template =~ s!CLLASTUPDATE!$what_time_is_it_now!g;
	$template =~ s!YEARMONTHDAY!$ymd!g;
	$template =~ s!YEARMONTH!$ym!g;
	$template =~ s!CLNAVI!$navi!g;
	$template =~ s!DAYLIST!$day_list!g;
	$template =~ s!MONTHPAGELIST!$month_page_list!g;
	$template =~ s!DAYSINTHEMONTH!$content!g;

	my $ostr = << "OSTR"
<html lang="ja"><head><title>$changelog_name - $ymd</title>
<meta http-equiv="Content-Type" content="text/html;charset=EUC-JP">
@{[(defined $css_file) ? 
qq(<link rel=stylesheet href="$css_file" media=all>) : ""]}
$day_page_head_plus
</head><body><div>
$template
$signature
</div></body></html>
OSTR
    ;

	output_to_file("$outputdir/$ymd.html", \$ostr);
    }
}


### 月ページ(ex: 2001-01.html)を作る。
sub write_month_page {
    my @month_list = reverse sort keys %month_page;
    for (my $idx = 0; $idx < @month_list; $idx++) {
	my $ym = $month_list[$idx];

	# 月ページ移動ナビ (前後の月ページへのリンク)
	my $navi = "";
	$navi .= qq(<a href="$month_list[$idx + 1].html">&lt;&lt;&lt;</a> )
	    if ($idx < @month_list - 1);
	$navi .= qq(<a href="$month_list[$idx - 1].html">&gt;&gt;&gt;</a> )
	    if ($idx > 0);

	# 日へのリンク (日付一覧)
	my $day_list = make_day_list_str($ym);

	my $template = $month_page_template;

	### 日々のエントリ作成
	my @cont;
	if ($reverse_order_days) { # 降順: 日付の新しいのが上 (〜v0.11 と同じ)
	    @cont = reverse sort keys %{$month_page{$ym}};
	} else {		# 昇順: 日付の古いのが上
	    @cont = sort keys %{$month_page{$ym}};
	}
	my $content = join('', map {$month_page{$ym}{$_}} @cont);

	### ↓機能しない！ 031229
	if ($day_page_mode == 2) { # 日モード (月ページヘッダのみモード)
	    $content =~ s!(<pre.*?>|</pre>)!!gsm;
	    $content =~ s|(<div\sclass="section">.*?<span\sclass="clitemheader">.*?</span>(</h3>)?).*?<!--eos-->|$1</p></div>|gsm;
	}

	$content = "\n$content\n";

	### 内部置き換え文字列
	$template =~ s!CLLASTUPDATE!$what_time_is_it_now!g;
	$template =~ s!YEARMONTH!$ym!g;
	$template =~ s!CLNAVI!$navi!g;
	$template =~ s!DAYLIST!$day_list!g;
	$template =~ s!MONTHPAGELIST!$month_page_list!g;
	$template =~ s!DAYSINTHEMONTH!$content!g;

	my $ostr = << "OSTR"
<html lang="ja"><head><title>$changelog_name - $ym</title>
<meta http-equiv="Content-Type" content="text/html;charset=EUC-JP">
@{[(defined $css_file) ?
qq(<link rel=stylesheet href="$css_file" media=all>\n) : ""]}
$month_page_head_plus
</head><body><div>
$template
$signature
</div></body></html>
OSTR
    ;
	output_to_file("$outputdir/$ym.html", \$ostr);
    }
}


### インデックスページ(index.html)を作る
sub write_index_page {
    ### 最近の何日かだけインデックスページに載せるための処理
    my $top_n_str = "";
    my @recent = (reverse sort keys %all_entries)[0..$opt_topn];
    for (my $i = 0; $i < $opt_topn and $recent[$i]; $i++) {
	my $ymd = $recent[$i];
	my ($ym, $d) = ($ymd =~ /^(\d{4}-\d\d)-(\d\d)$/);
	$top_n_str .= $month_page{$ym}{$ymd};
    }
    my ($ym, $d) = ($recent[0] =~ /^(\d{4}-\d\d)-(\d\d)$/);

    # 日へのリンク (日付一覧)
    my $day_list = make_day_list_str($ym);

    my $template = $index_page_template;

    ### 内部置き換え文字列
    $template =~ s!CLLASTUPDATE!$what_time_is_it_now!g;
    $template =~ s!YEARMONTH!$ym!g;
    $template =~ s!DAYLIST!$day_list!g;
    $template =~ s!NDAYS!$opt_topn!g;
    $template =~ s!MONTHPAGELIST!$month_page_list!g;
    $template =~ s!LATESTDAYS!\n$top_n_str!g if ($opt_topn);
    # ↑ 最近 N 日分

    my $ostr = << "OSTR"
<html lang="ja"><head><title>$changelog_name</title>
<meta http-equiv="Content-Type" content="text/html;charset=EUC-JP">
@{[(defined $css_file) ?
qq(<link rel=stylesheet href="$css_file" media=all>\n) : ""]}
$index_page_head_plus
</head><body><div>
$template
$signature
</div></body></html>
OSTR
    ;

    output_to_file("$outputdir/index.html", \$ostr);
}


### 月別一覧を作成
sub make_month_page_list {
    my ($month_page) = @_;
    my @month_list = sort keys %{$month_page};
    my ($start_year) = ($month_list[0] =~ /^(\d\d\d\d)/);
    my ($end_year) = ($month_list[$#month_list] =~ /^(\d\d\d\d)/);
    my $month_page_list = "";
    for (my $y = $end_year; $y >= $start_year; $y--) { # year loop
	$month_page_list .= "$y : ";
	for (my $m = 1; $m <= 12; $m++) { # month loop	
	    my $m0 = sprintf "%02d", $m;
	    if (defined $month_page->{"$y-$m0"}) {
		$month_page_list .= "<a href=\"$y-$m0.html\">$m0</a> ";
	    } else {
		$month_page_list .= "$m0 ";
	    }
	}
	$month_page_list .= "<br>\n";
    }
    return $month_page_list;
}


### 日付一覧を作成 - 文字列を返す
sub make_day_list_str {	
    my ($ym) = @_;
    if ($calendar_style == 1) {
	return make_calendar_table($ym, make_day_list($ym));
    } else {
	return join(" ", @{make_day_list($ym)});
    }
}

# 日付一覧を作成 - リストへのポインタを返す
my %daylist;
sub make_day_list {	
    my ($ym) = @_;
    my $lday = get_last_day_of_month($ym);
    return $daylist{$ym} if (defined $daylist{$ym}); # cache
    for (my $d = 1; $d <= $lday; $d++) {
	my $day = ($d < 10) ? "0".$d : $d;
	if (defined $all_entries{$ym."-".$day}) {
	    my $day_url = datestr2url($ym."-".$day);
	    push @{$daylist{$ym}}, qq(<a href="$day_url">$day</a>);
	} else {
	    push @{$daylist{$ym}}, $day;
	}
    }
    return $daylist{$ym};
}

# 日付一覧を作成 - カレンダースタイル
sub make_calendar_table {
    my ($ym, $dlistp) = @_;
    my ($y, $m) = split("-", $ym);
    my $offset = (localtime timelocal(0, 0, 0, 1, $m - 1, $y))[6];
    
    my $week = 0;
    my @cal;
    for (my $i = 0; $i < 42; $i++) {
	my $day = ($i < $offset) ? " " : $dlistp->[$i - $offset];
	last if (not $day);
	$day =~ s/^0//;
	$day =~ s/>0([1-9])</>$1</;
	$cal[$week] .= qq(<td align="center">$day</td>);
	$week++ if (($i + 1) % 7 == 0);
    }

    my @wn = ("S", "M", "T", "W", "T", "F", "S");
#    my @wn = ("Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat");

    my $rv = << "CAL"
<table>
<caption><a href="$ym.html">$ym</a></caption>
<tr>
@{[join "", map {qq(<th alisgn="center">$_</th>)} @wn]}
</tr>
@{[join "", map {"<tr>$_</tr>"} @cal]}
</table>
CAL
    ;

    return $rv;
}


### anchor, img タグ文字列を生成。
sub get_link_str {
    my ($a, $b) = @_;
    if ($a =~ /\.(jpg|jpeg|png|gif)$/i) { # [[http://nais.to/|image/nais.jpg]]
	return qq(<a href="$b"><img src="$a" alt="画像"></a>);
    } elsif ($b =~ /\.(jpg|jpeg|png|gif)$/i) { # [[自画像|image/sp.jpg]]
	return qq(<img src="$b" alt="$a">);
    } else {			# [[トップページ|http://nais.to/]]
	return qq(<a href="$b">$a</a>);
    }
}


### 年月日を入力とし曜日を出力する関数 since 021001
# RETURN VALUES
#     the text name of the day of the week.  Mon, Tue, Wed, ...
# EXAMPLES
#     get_day_of_week(1, 12, 2002), get_day_of_week("2002-12-01")
sub get_day_of_week {
    my ($d, $m, $y) = @_;
    ($y, $m, $d) = split("-", $d) unless (defined $m);
    my $WEEKDAY = (localtime timelocal(0, 0, 0, $d, $m - 1, $y))[6];
    return ("Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat")[$WEEKDAY];
}


### 年月を入力としその月の最終日を出力する関数 since 030105
# EXAMPLES
#     get_last_day_of_month(12, 2002), get_last_day_of_month("2002-12")
sub get_last_day_of_month {
    my ($m, $y) = @_;
    ($y, $m) = split("-", $m) unless (defined $y);
    return (31, ((($y % 4 == 0) and ($y % 100)) or ($y % 400 == 0)) ? 29 : 28,
	    31, 30, 31, 30, 31, 31, 30, 31, 30, 31)[$m - 1];
}


### RSS ファイルを出力する
sub write_rss_file {
    my $rdfseq;
    my $rdfitem;
    my $ctr = ($opt_topn > 7) ? 7 : $opt_topn;
    foreach my $ymd (sort {$b cmp $a} keys %all_entries) {
	$ctr--;
	last if ($ctr < 0);
	
	foreach my $i (sort {$b <=> $a} keys %{$all_entries{$ymd}}) {
	    next if ($i !~ /^\d/);

	    my $permlink = $clog_url_pref.datestr2url($ymd."-".$i);
	    my ($ym) = ($ymd =~ /^(\d{4}-\d\d)-\d\d/);
	    my $ih = html2xmlstr($all_entries{$ymd}{$i}{h});
	    my $co = html2xmlstr($all_entries{$ymd}{$i}{c});
	    if ($co =~ s/^(([\x00-\x7F]|[\x80-\xFF]{2}){300}).+$/$1/sm) {
		$co =~ s/&[^;]*$//g; # &gt...$ でXMLパーズエラー。アフォかと 
		$co .= "...";
	    }

	    $rdfitem .= qq(
<item rdf:about="$permlink">
 <title>$ymd-$i  $ih</title>
 <link>$permlink</link>
 <description>$co</description>
 <dc:date>$ymd</dc:date>
</item>);
	    $rdfseq .= qq(<rdf:li resource="$permlink"/>\n);
	}
    }

    my $rdfstr = << "RDFSTR"
<?xml version="1.0" encoding="utf-8"?>

<rdf:RDF
 xmlns="http://purl.org/rss/1.0/"
 xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
 xmlns:dc="http://purl.org/dc/elements/1.1/"
 xmlns:admin="http://webns.net/mvcb/"
 xmlns:lang="ja">
<channel rdf:about="${clog_url_pref}cl.rdf">
<title>$changelog_name</title>
<link>$clog_url</link>
<description>$changelog_description</description>
<dc:date>$dcdate</dc:date>
<admin:generatorAgent rdf:resource="http://nais.to/~yto/tools/chalow/?v=0.24"/>
<items>
<rdf:Seq>\n$rdfseq</rdf:Seq>
</items>
</channel>$rdfitem
</rdf:RDF>
RDFSTR
	;

    $rdfstr = Jcode->new($rdfstr)->utf8;
    output_to_file("$outputdir/cl.rdf", \$rdfstr);
}

sub html2xmlstr {
    local ($_) = @_;
    s/&nbsp;/ /g;
    s|<img.+?alt="(.*?)".*?>|[$1]|gosm;
    s/[\t\n]//g;
    s/[\x00-\x1f]+/ /g;
    s/\s\s+/ /g;
    s|<[^<>]+?>||gosm;
    s/&lt;/</go;
    s/&/&amp;/go; s/>/&gt;/go; s/</&lt;/go; s/\"/&quot;/go; # "いつもの４つ
    return $_;
}


### JavaScript feed ファイルを出力する
sub write_js_file {
    my $ostr;

    ### 最近の記事
    my $date;
    my $ctr = $latest_titles_num;
    foreach my $ymd (sort {$b cmp $a} keys %all_entries) {
	$ctr--;
	last if ($ctr < 0);
	foreach my $i (sort {$b <=> $a} keys %{$all_entries{$ymd}}) {
	    next if ($i !~ /^\d/);
	    my ($ym) = ($ymd =~ /^(\d{4}-\d\d)-\d\d/);
	    my $c = $all_entries{$ymd}{$i}{h};
            $c =~ s/[\t\n]//g;
	    $c =~ s/\s\s+/ /g;
	    $c =~ s/\s*$//;
            $c =~ s/<.+?>//g;
	    $c =~ s/^\*\s+//;
	    $c =~ s/\'/&\#x27;/g;
	    if ($date ne $ymd) {
		$ostr .= "document.writeln('<a href=\"".
		    $clog_url_pref.datestr2url("$ymd")."\">$ymd</a><br>');\n";
		$date = $ymd;
	    }
	    $ostr .= "document.writeln('- <a href=\"".
		$clog_url_pref.datestr2url("$ymd-$i")."\">$c</a><br>');\n";
	}
    }
    output_to_file("$outputdir/cl.js", \$ostr);

    ### カテゴリ一覧
    $ostr = "";
    foreach my $cat (sort keys %category_item) {
	my $n = scalar(@{$category_item{$cat}});
	my $url = get_category_filename($cat);
	$cat =~ s/\'/&\#x27;/g;
	my $u = $clog_url_pref.$url;
	$ostr .= "document.writeln('- <a href=\"$u\">$cat</a> ($n)<br>');\n";
    }
    output_to_file("$outputdir/cl-cat.js", \$ostr);
}


### 検索用ファイルを出力する
# clsearch.cgi 用のファイルを生成
sub write_itemlist_file {
    my $ostr;
    foreach my $ymd (sort {$b cmp $a} keys %all_entries) {
	foreach my $i (sort {$b <=> $a} keys %{$all_entries{$ymd}}) {
	    next if ($i !~ /^\d/);
	    my ($ym) = ($ymd =~ /^(\d{4}-\d\d)-\d\d/);
	    my $c = $all_entries{$ymd}{$i}{h}." ".$all_entries{$ymd}{$i}{c};
	    $c =~ s|<img.+?alt="(.*?)".*?>|[$1]|gosm;
            $c =~ s/[\t\n]//g;
	    $c =~ s/&nbsp;/ /g;
	    $c =~ s/\s\s+/ /g;
            $c =~ s/<.+?>//g;
	    $ostr .= datestr2anchor("[$ymd-$i]")."\t$c\n";
	}
    }
    output_to_file("$outputdir/cl.itemlist", \$ostr);
}


### 日付で参照リンク
sub datestr2anchor {
    my ($d) = @_;
    if ($day_page_mode) {	# 日モード
	$d =~ s!\[((\d{4}-\d\d-\d\d)(-\d+)?)\]!<a href="$2.html#$1">[$1]</a>!g;
    } else {			# 月モード
	$d =~ s!\[((\d{4}-\d\d)-\d\d(-\d+)?)\]!<a href="$2.html#$1">[$1]</a>!g;
    }
    return $d;
}

sub datestr2url {
    my ($d) = @_;
    if ($day_page_mode) {	# 日モード
	unless ($d =~ s!((\d{4}-\d\d-\d\d)-\d+)!$2.html\#$1!) {
	    $d =~ s!(\d{4}-\d\d-\d\d)!$1.html!;
	}
    } else {			# 月モード
	$d =~ s!((\d{4}-\d\d)-\d\d(-\d+)?)!$2.html#$1!;
    }
    return $d;
}


### 文字列置き換えから一時的に退避し、後に復帰させる
my $num_of_escaped_string;
my %escaped_string;
my $num_of_escaped_src;
my %escaped_src;
my $num_of_escaped_plugin;
my %escaped_plugin;

sub escape_string {
    my ($strp) = @_;

    ### HTML エスケープ - 文字列そのまま
    my $btag = '_HTML_START_\n'; # 開始マーク
    my $atag = '_HTML_END_\n'; # 終了マーク
    $num_of_escaped_string = 0;
    $$strp =~ s!$btag(.*?)$atag!
	$escaped_string{++$num_of_escaped_string} = $1,
	sprintf("\x5\x13%d\x3", $num_of_escaped_string)!gsmxe;
    $$strp =~ s!\[(literal|sic|esc)\](.*?)\[/\1\]!
	$escaped_string{++$num_of_escaped_string} = $2,
	sprintf("\x5\x13%d\x3", $num_of_escaped_string)!gsmxe;

    ### ソースエスケープ - "&" や "<" などを置換し pre を付ける
    $num_of_escaped_src = 0;
    $$strp =~ s!\[src\](.*?)\[/src\]!
	$escaped_src{++$num_of_escaped_src} = $1,
	$escaped_src{$num_of_escaped_src} =~ s/&/&amp;/g,
	$escaped_src{$num_of_escaped_src} =~ s/</&lt;/g,
	sprintf("\x6\x13%d\x3", $num_of_escaped_src)!gsmxe;

    ### プラグインエスケープ
    $num_of_escaped_plugin = 0;
    $$strp =~ s!{{(.*?)}}!
	$escaped_plugin{++$num_of_escaped_plugin} = $1,
	sprintf("\x7\x13%d\x3", $num_of_escaped_plugin)!gsmxe;
}

sub unescape_string {
    my ($strp) = @_;

    ### プラグインアンエスケープ - 実行！
    $$strp =~ s|\x7\x13(\d+)\x3|eval($escaped_plugin{$1})|ge;
    ### ソースアンエスケープ - pre 追加
    $$strp =~ s|\x6\x13(\d+)\x3|<pre>$escaped_src{$1}</pre>|g;
    ### HTML アンエスケープ
    $$strp =~ s|\x5\x13(\d+)\x3|$escaped_string{$1}|g;
}


### ChangeLog のクリーニング
# 日付単位に分割してリストに入れる
sub clean_changelog {
    my ($linesp, $strp) = @_;

    @$linesp = split(/(?=^\d{4}-\d\d-\d\d)/m, $$strp); # 日付(entry)単位に分解
    foreach (@$linesp) {
	s/\r//g;
 	s/^( {8}| {0,7}\t)//gsm; # 行頭のタブ or タブ相当を消す
	s/^([ \t]+)\n/\n/gsm;	# スペース、タブだけの行をクリア

	s/^(^\d+-\d+-\d+)\s\(.+?\)/$1/m; # 曜日を削る

	# 秘密の項目を外に出さないように削除
	# 例: * p:秘密メモ: YTがまたやらかした。しょうもないやつだ。
	my $secmempat = '(\* p:.+?)^(\* (?!p:)|\Z)';
	if ($debug_mode) {	# debug
	    while (/^($secmempat)/gms) {
		print "$2($3)\n";
	    }
	}
	s/^$secmempat/$2/gms;

	# 秘密の項目を削除した結果、空になったエントリを削除
	next if (s/^\d{4}-\d\d-\d\d.*?\n+\Z//gm);

	s/^(\* .+?:)\s+$/$1/gms; # 「* aaa: \n」→「* aaa:\n」

	s/\n\n+/\n\n/gm;	# 連続空行を詰める
    }
}


### inside referrer のリンク作成
sub get_inside_ref {
    my ($id) = @_;
    if (defined $inside_ref{"$id"}) {
        return map {datestr2anchor("[".$_."]")} 
	(sort {$b cmp $a} keys %{$inside_ref{"$id"}});
    }
    return ();
}


### カテゴリページのファイル名を生成
sub get_category_filename {
    my ($cn) = @_;
    if ($cn =~ /[\x80-\xff]/) {
	$cn = Jcode->new($cn)->utf8;
    }
    $cn =~ s/([^0-9a-z_-])/unpack('H2', $1)/gei;
    $cn =~ tr/A-Z/a-z/;
    return "cat_$cn.html";
}


### エントリヘッダーの生成
sub make_entry_header_html {
    my ($eh, $ymd) = @_;
    if ($show_day_of_week == 1) { ### 日付の後ろをどうするか?
	# 曜日(Mon, Tue, ...)を追加: "2000-10-19" --> "2000-10-19 Thu"
	$eh .= " ".get_day_of_week($ymd);
    }
    return qq(<a name="$ymd" href="@{[datestr2url($ymd)]}">$eh</a>);
}


### アイテムヘッダーの生成
sub make_item_header_html {
    my ($ih, $ymdi) = @_;
    # 前に足すもの
    my $ihb = "";
    if ($item_header_style == 0 or $item_header_style == 1) {
	$ihb = $item_header_mark;
	if ($use_item_anchor == 1) {
	    my $day_url = datestr2url($ymdi);
	    $ihb = qq(<a name="$ymdi" href="$day_url">$ihb</a>);
	}
	$ihb .= " ";
    }
    # タグで囲む
    $ih = qq($ihb<span class="clitemheader">$ih</span>);
    # 後ろに足すもの
    if ($item_header_style == 0 or $item_header_style == 2) {
	$ih .= ":";
    }
    return $ih;
}


### 指定されたファイルへ文字列を出力
sub output_to_file {
    my ($fname, $contp) = @_;
    if ($update_by_size == 1 and -s $fname == length($$contp)) {
	return;
    }
    print "output to \"$fname\"\n" if (!defined $quiet_mode);
    open(F, "> $fname") || die "$fname: $!\n";
    binmode(F);
    print F $$contp;
    close(F);
}

