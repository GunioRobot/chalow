#!/usr/bin/env perl
# $Id: chalow,v 1.95 2004/12/24 12:09:50 yto Exp $
#
# chalow - CHAngeLog On the Web - convert ChangeLog to HTML files
#
# This is free software with ABSOLUTELY NO WARRANTY.
# 無償・無保証・著作権放棄 (see http://nais.to/~yto/doc/zb/0002.html)
#
# chalow ホームページ: http://nais.to/~yto/tools/chalow
use strict;
use Getopt::Long;
use POSIX qw(strftime ceil);
use Jcode;
use Time::Local;		# for 曜日
use HTML::Template;
use ChangeLogReader;

my $version = '1.0rc4';

# 現在時刻の獲得
my $what_time_is_it_now = strftime "%Y-%m-%d %H:%M", localtime;
my $dcdate = strftime "%Y-%m-%dT%H:%M:%S+09:00", localtime;
my ($current_ym) = ($what_time_is_it_now =~ /^(\d+-\d+)/); # 今月

### ユーザ設定項目 obsolete

# 自分の home page URL --- 廃止予定。テンプレートに直接書く方針で
my $home_page_url = "http://nais.to/~yto/tools/chalow/";
# 自分のホームーページの呼び名 --- 廃止予定。同上
my $home_page_name = "chalow home page";


### ユーザ設定項目
## デフォルト設定 (ユーザ設定ファイル名が指定されてないとき)
# 日記の名前
my $changelog_name = "ChangeLog";
# 自動文字列置換
my $auto_replace = '';
# CSS ファイル
my $css_file;
# インデックスページ(index.html)で最近何日分を表示するか
my $opt_topn = 5;
# 日付の後に曜日(Mon, Tue, ...)を表示するか (1:yes or 0:no)
my $show_day_of_week = 1;
# 月ページで、日付を降順 (新しい日付が上) で表示するか (1:yes or 0:no)
my $reverse_order_days = 0;

# インデックスページのテンプレート
my $index_page_template = << "___INDEX_PAGE_TEMPLATE"
<html lang="ja"><head>
<meta http-equiv="Content-Type" content="text/html;charset=EUC-JP">
<TMPL_IF name=css_file>
 <link rel=stylesheet href="<TMPL_VAR name=css_file>" media=all>
</TMPL_IF>
<link rel="alternate" type="application/rss+xml" title="RSS" href="cl.rdf">
<title><TMPL_VAR name=cl_name></title>
</head><body>
<a href="cl.rdf">RSS</a>
<h1><a href="index.html"><TMPL_VAR name=cl_name></a></h1>
<p class="calendar"><TMPL_VAR name=ym> / <TMPL_VAR name=day_list></p>
<p>最終更新時間: <TMPL_VAR name=lastupdate></p>
<p class="calendar"><TMPL_VAR name=month_page_list></p>
<p>最近 <TMPL_VAR name=ndays> 日分</p>
<TMPL_LOOP name=entries><TMPL_VAR name=content></TMPL_LOOP>
<TMPL_VAR name=signature>
</div></body></html>
___INDEX_PAGE_TEMPLATE
    ;

# 月ページのテンプレート
my $month_page_template = << "___MONTH_PAGE_TEMPLATE"
<html lang="ja"><head>
<meta http-equiv="Content-Type" content="text/html;charset=EUC-JP">
<TMPL_IF name=css_file>
 <link rel=stylesheet href="<TMPL_VAR name=css_file>" media=all>
</TMPL_IF>
<link rel="alternate" type="application/rss+xml" title="RSS" href="cl.rdf">
<title><TMPL_VAR name=cl_name> / <TMPL_VAR name=ym></title>
</head><body>
<TMPL_IF name=back><a href="<TMPL_VAR name=back>.html">前の月</a></TMPL_IF>
<TMPL_IF name=next> / <a href="<TMPL_VAR name=next>.html">次の月</a></TMPL_IF>
<h1><a href="index.html"><TMPL_VAR name=cl_name></a> <TMPL_VAR name=ym></h1>
<p class="calendar"><TMPL_VAR name=day_list></p>
<p class="calendar"><TMPL_VAR name=month_page_list></p>
<TMPL_LOOP name=entries><TMPL_VAR name=content></TMPL_LOOP>
<p>最終更新時間: <TMPL_VAR name=lastupdate></p>
<TMPL_VAR name=signature>
</div></body></html>
___MONTH_PAGE_TEMPLATE
    ;

# 日ページのテンプレート
my $day_page_template = << "___DAY_PAGE_TEMPLATE"
<html lang="ja"><head>
<meta http-equiv="Content-Type" content="text/html;charset=EUC-JP">
<TMPL_IF name=css_file>
 <link rel=stylesheet href="<TMPL_VAR name=css_file>" media=all>
</TMPL_IF>
<link rel="alternate" type="application/rss+xml" title="RSS" href="cl.rdf">
<title><TMPL_VAR name=cl_name> / <TMPL_VAR name=ymd></title>
</head><body>
<TMPL_IF name=back><a href="<TMPL_VAR name=back>.html">前の日</a></TMPL_IF>
<TMPL_IF name=next> / <a href="<TMPL_VAR name=next>.html">次の日</a></TMPL_IF>
<h1><a href="index.html"><TMPL_VAR name=cl_name></a></h1>
<TMPL_VAR name=content> 
<p class="calendar"><a href="<TMPL_VAR name=ym>.html"><TMPL_VAR name=ym></a>
 / <TMPL_VAR name=day_list></p>
<p class="calendar"><TMPL_VAR name=month_page_list></p>
<p>最終更新時間: <TMPL_VAR name=lastupdate></p>
<TMPL_VAR name=signature>
</div></body></html>
___DAY_PAGE_TEMPLATE
    ;

# アイテムページのテンプレート
my $item_page_template = << "___PAGE_TEMPLATE"
<html lang="ja"><head>
<meta http-equiv="Content-Type" content="text/html;charset=EUC-JP">
<TMPL_IF name=css_file>
 <link rel=stylesheet href="<TMPL_VAR name=css_file>" media=all>
</TMPL_IF>
<link rel="alternate" type="application/rss+xml" title="RSS" href="cl.rdf">
<title><TMPL_VAR name=header_text></title>
</head><body>
<TMPL_IF name=back><a href="<TMPL_VAR name=back>.html">前</a></TMPL_IF>
<TMPL_IF name=next> / <a href="<TMPL_VAR name=next>.html">次</a></TMPL_IF>
/ <a href="index.html"><TMPL_VAR name=cl_name></a>
<h1><TMPL_VAR name=header><TMPL_VAR name=cat></h1>
<div class="day">
<a href="<TMPL_VAR name=ymd>.html"><TMPL_VAR name=ymd></a>
<div class="body">
<!-- start:<TMPL_VAR name=ymdi> -->
<div class="section">
<p><TMPL_VAR name=content></p>
<TMPL_IF name=referrer>
 <div class="referer"><span>Referrer (Inside): 
 <TMPL_VAR name=referrer></span></div>
</TMPL_IF>
<p><a href="<TMPL_VAR name=ymdi>.html">permlink</a></p>
</div>
<!-- end:<TMPL_VAR name=ymdi> -->
</div></div>
<!--<p>最終更新時間: <TMPL_VAR name=lastupdate></p>-->
<TMPL_VAR name=signature>
</div></body></html>
___PAGE_TEMPLATE
    ;

# カテゴリページのテンプレート
my $cat_page_template = << "TMPL"
<html lang="ja"><head>
<meta http-equiv="Content-Type" content="text/html;charset=EUC-JP">
<TMPL_IF name=css_file>
 <link rel=stylesheet href="<TMPL_VAR name=css_file>" media=all>
</TMPL_IF>
<link rel="alternate" type="application/rss+xml" title="RSS" href="cl.rdf">
<title><TMPL_VAR name=cat_name> / <TMPL_VAR name=cl_name></title>
</head><body>
<TMPL_IF name=page_list><TMPL_VAR name=page_list></TMPL_IF>
<h1><TMPL_VAR name=cat_name> -
 <a href="index.html"><TMPL_VAR name=cl_name></a></h1>
<div>
<TMPL_LOOP name=entries>
 <div class="day"><h2><span class="date"><TMPL_VAR name=eh></span></h2>
 <div class="body"><TMPL_VAR name=cont></div></div>
</TMPL_LOOP>
<p>最終更新時間: <TMPL_VAR name=lastupdate></p>
<TMPL_VAR name=signature>
</div></body></html>
TMPL
    ;

# item のテンプレート
my $item_template = << "EACHITEM"
<!-- start:<TMPL_VAR name=ymdi> -->
<div class="section">
<p><TMPL_VAR name=header><TMPL_VAR name=cat><TMPL_VAR name=content></p>
<TMPL_IF name=referrer>
 <div class="referer"><span>Referrer (Inside): 
 <TMPL_VAR name=referrer></span></div>
</TMPL_IF>
</div>
<!-- end:<TMPL_VAR name=ymdi> -->
EACHITEM
    ;

# entry (date) のテンプレート
my $entry_template = << "DAYENTRY"
<div class="day">
<h2><span class="date"><TMPL_VAR name=header></span></h2>
<div class="body">
<TMPL_IF name=message_top><TMPL_VAR name=message_top></TMPL_IF>
<TMPL_IF name=same_date><div class="calendar"><TMPL_VAR name=same_date></div>
</TMPL_IF>
<TMPL_VAR name=content>
<TMPL_IF name=referrer>
 <div class="referer"><span>Referrer (Inside): 
 <TMPL_VAR name=referrer></span></div>
</TMPL_IF>
<TMPL_IF name=message_bottom><TMPL_VAR name=message_bottom></TMPL_IF>
</div>
</div>
DAYENTRY
    ;
#<div class="body" style="margin-left:4em;">

# RSSファイルのテンプレート
my $rss_template = << "RDFSTR"
<?xml version="1.0" encoding="utf-8"?>
<rdf:RDF
 xmlns="http://purl.org/rss/1.0/"
 xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
 xmlns:dc="http://purl.org/dc/elements/1.1/"
 xmlns:content="http://purl.org/rss/1.0/modules/content/"
 xmlns:admin="http://webns.net/mvcb/"
 xml:lang="ja">
<channel rdf:about="<TMPL_VAR name=clog_url_pref>cl.rdf">
 <title><TMPL_VAR name=changelog_name></title>
 <link><TMPL_VAR name=clog_url></link>
 <description><TMPL_VAR name=changelog_description></description>
 <dc:language>ja</dc:language>
 <dc:date><TMPL_VAR name=dcdate></dc:date>
 <admin:generatorAgent rdf:resource="<TMPL_VAR name=generatorAgent>"/>
 <items>
 <rdf:Seq><TMPL_LOOP name=items>
  <rdf:li rdf:resource="<TMPL_VAR name=permlink>"/></TMPL_LOOP>
 </rdf:Seq>
 </items>
</channel>
<TMPL_LOOP name=items>
<item rdf:about="<TMPL_VAR name=permlink>">
 <title><TMPL_VAR name=itemheader></title>
 <link><TMPL_VAR name=permlink></link>
 <description>
  <TMPL_VAR name=itemcontent>
 </description>
 <dc:creator><TMPL_VAR name=itemauthor></dc:creator>
 <dc:date><TMPL_VAR name=item_dcdate></dc:date>
 <content:encoded>
  <![CDATA[<TMPL_VAR name=itemcontentencoded>]]>
 </content:encoded>
</item>
</TMPL_LOOP>
</rdf:RDF>
RDFSTR
	;

# 表示するとき引用記号 ('>' or '|') を消すか (1:YES, 0:NO)
my $remove_quote_mark = 0;

# 日付一覧をカレンダー表示にするか (1:YES, 0:NO)
my $calendar_style = 0;

# アイテムヘッダーのフォーマットをどうするか
# (0:"* HOGE:", 1:"* HOGE", 2:"HOGE:",3:"HOGE")
my $item_header_style = 0;
# item header で h3 タグを使うか (1:YES, 0:NO) - tDiary との互換性のため
my $use_h3_for_item_header = 0;
# item header の先頭の記号にアンカーをつけるか (1:YES, 0:NO)
my $use_item_anchor = 1;
# item header の先頭の記号の指定
# 『日記のセクションの先頭(サブタイトルの行頭)に挿入される、リンク用の
# アンカー文字列を指定します。なお「<span class="panchor">_</span>」を
# 指定すると、テーマによっては自動的に画像アンカーがつくようになりま
# す。』(tDiary の skel/conf.rhtml より)
my $item_header_mark = '<span class="sanchor">*</span>';

# 他の年の同じ日付 (月日) へのリンクを張るか (1:YES, 0:NO)
my $same_date_jump = 1;
# # 各アイテムに記述者名を表示するか (1:YES, 0:NO)
# my $show_author_name = 0;

# RSS を出力するか (1:YES, 0:NO)
my $output_rss = 1;
# 日記の説明 for RSS : 例: "日々のあれこれ。"
my $changelog_description = "";
# ChangeLog を公開する URL (絶体 URL を強く推奨) - RSS に必須
#my $clog_url = "http://nais.to/~yto/clog/";
my $clog_url = "./";

# 検索用ファイル (cl.itemlist) を作るか (1:YES, 0:NO)
my $output_itemlist = 1;
# 見出し一覧 (JavaScript ファイル) で出力する日数
my $latest_titles_num = 10;

# 日ごとにページを作るか (0:NO, 1:YES) --- obsolete
my $day_page_mode = 0;
# 作成するページの単位＝最小ページ単位 (0:月, 1:日, 2:アイテム)
my $page_mode = 0;

# カテゴリページを作るか (0:NO, 1:YES)
my $output_cat_pages = 1;
# カテゴリページ中のエントリ数の上限
# ($output_cat_pages = 1 のときのみ有効)
my $cat_page_entry_max = 10;
# カテゴリ別item表示のためのCGIを指定する（カテゴリ名は %%CAT%% で置き換え）
# ($output_cat_pages = 0 のときのみ有効)
my $cat_page_cgi = "clsearch.cgi?cat=%%CAT%%";
#my $cat_page_cgi = "";

# ファイルの最初に出てくる「<!-- ReplaceOnce -->」を置き換える文字列
my $replace_once = "";

### chalow 普及のため HTML の一番下にリンクを表示する。できれば消さないで。
my $signature = qq(<p class="footer">Powered by 
<a href="http://nais.to/~yto/tools/chalow/">chalow</a></p>);

### コマンドライン引数
Getopt::Long::Configure('bundling');
my ($opt_topn_tmp, $outputdir, $quiet_mode, $opt_css_file, $debug_mode,
    $update_by_size, $conf_file, $stop_date);
my $gor = GetOptions('n|top-n=n'   => \$opt_topn_tmp,
		     'o|output-dir=s'   => \$outputdir,
		     'c|configure-file=s' => \$conf_file,
		     's|stop-date=s' => \$stop_date,
		     'u|update-by-size' => \$update_by_size,
		     'C|css=s' => \$opt_css_file,
		     'q|quiet' => \$quiet_mode,
		     'd|debug' => \$debug_mode);

if (@ARGV == 0 or $gor == 0) {
    print << "USAGE";
usage: chalow [options] <file> [file]...
    -n, --top-n=NUM             write NUM days to "index.html"
    -o, --output-dir=DIR        directory to output
    -c, --configure-file=FILE   configure file (default "cl.conf")
    -s, --stop-date=DATE        date to stop processing
    -u, --update-by-size        overwrite only if sizes are different
    -C, --css=FILE              css file
    -q, --quiet                 quiet mode
    -d, --debug                 debug mode
USAGE
    ;
    exit;
}

# ユーザ設定ファイルの読み込み (ファイル名が指定されてたときのみ)
if ($conf_file ne "") {
    open(CONF, $conf_file) or die "Can't open $conf_file : $!\n";
    binmode(CONF);
    my $conf = join('', <CONF>);
    $conf = Jcode->new($conf)->euc;
    eval $conf;
    die qq(error in "$conf_file" (obsolete variable?): $@\n) if ($@);
}

$outputdir = "." if (not defined $outputdir);

# ユーザ設定ファイルよりコマンドライン指定を優先する処理
$opt_topn = $opt_topn_tmp if (defined $opt_topn_tmp);
$css_file = $opt_css_file if (defined $opt_css_file);

# 処理停止日付: 文字列だったものを数値にする。後で数値として日付の比較
# に使うから。
$stop_date =~ s/-//g;

my $latest_item_list;
my $category_list;
my %category_count;

my $clog_url_pref = $clog_url;
$clog_url_pref =~ s!/[^/]+html?$!/!;
$clog_url_pref .= "/" unless ($clog_url_pref =~ m!/$!);
# SPEC:       $clog_url                    $clog_url_pref
# http://nais.to/~yto/clog/           -> http://nais.to/~yto/clog/
# http://nais.to/~yto/clog/index.html -> http://nais.to/~yto/clog/
# http://nais.to/~yto/clog            -> http://nais.to/~yto/clog/

my %month_page;			# 月別のページ
my %category_item;		# カテゴリ別ページ用 item
my %inside_ref;			# 日付リンクによるリファラー

my %entry_statistics;
# {"ymd"} : 日付 (年-月-日) の重複 (for 複数人利用)
# {"ym"} : 各年月に含まれている日付エントリ数
# {"md"} : 同じ月日を持つ年 for same date jump

my %all_entries;                # hash for all ChangeLog entries
# {XXXX-XX-XX}{"eh"} - Entry header
# {XXXX-XX-XX}{1,2,3,...}{"ho"} - Item header (original text)
# {XXXX-XX-XX}{1,2,3,...}{"co"} - Item content (original text)
# {XXXX-XX-XX}{1,2,3,...}{"cat"} - Category (array)
# {XXXX-XX-XX}{1,2,3,...}{"a"} - Author
# {XXXX-XX-XX}{"message-top"} - Pragma item
# {XXXX-XX-XX}{"message-bottom"} - Pragma item
# {XXXX-XX-XX}{curid} - Item ID manager
# {XXXX-XX-XX}{1,2,3,...}{"h"} - アイテムヘッダ
# {XXXX-XX-XX}{1,2,3,...}{"c"} - 中味

for my $fname (@ARGV) {
    print "reading \"$fname\"\n" if (!defined $quiet_mode);

    ### クリーニングのためにChangeLogファイル一気に読み込む
    open(F, $fname) || die "file open error $fname : $!";
    binmode(F);
    my @entlines;
    while (<F>) {
	if (/^(\d{4}-\d\d-\d\d)/) {
	    my ($ymd, $y, $m, $d) = (/^((\d+)-(\d+)-(\d+))/);
#	    $entry_statistics{ymd}{$ymd}++;	# for 複数人利用
	    $entry_statistics{ym}{$y."-".$m}++; # for month_page_list
	    $entry_statistics{md}{$m."-".$d}{$y} = 1; # for SameDateJump

	    store_entry(\%all_entries, \@entlines) if (@entlines > 0);
	    @entlines = ();
	} elsif (/^\t?__DATA__.*$/) {
	    last;
	}
	push @entlines, $_;    
    }
    store_entry(\%all_entries, \@entlines) if (@entlines > 0);
    close F;
}
#debug_print(\%all_entries);
foreach my $ymd (keys %all_entries) {
    my $ent = $all_entries{$ymd};
    for (my $i = $ent->{curid}; $i >= 1; $i--) {
	if (defined $ent->{$i}->{cat}) {
	    map {$category_count{$_}++} @{$ent->{$i}->{cat}};
	}
    }
}

print "done.\nconverting\n" if (!defined $quiet_mode);

#$all = Jcode->new($all)->euc; # 文字コードを euc にしておく

foreach my $ymd (reverse sort keys %all_entries) {
    next unless ($ymd =~ /^((\d+)-(\d+)-(\d+))/);

    ### stop date
    # - 過去のentry,itemからのリファラ、SameDateJump がダメ
    # - カテゴリ別ページもダメ
    if ($stop_date != 0) {
	$ymd =~ (/^(\d+)-(\d+)-(\d+)/);
	my $cdate = $1 * 10000 + $2 * 100 + $3;
	if ($stop_date > $cdate) {
	    delete $all_entries{$ymd};
	    next;
	}
    }

    # エントリをパーズして、文字列置き換え、格納
    parse_entry($ymd, \%{$all_entries{$ymd}});
}

print "done.\n" if (!defined $quiet_mode);

# 月別一覧を作成しておく
my $month_page_list = make_month_page_list(\%{$entry_statistics{ym}}); 

# 今月の日付一覧を作成しておく
my $current_day_list = make_day_list_str($current_ym);

write_rss_file() if ($output_rss); # RSS ファイルを作る
write_itemlist_file() if ($output_itemlist); # 検索用ファイル(itemlist)を作る 
write_latest_item_list_file();	# 最近の話題一覧を作る
write_category_list_file();	# カテゴリ一覧を作る

### HTML 生成のためのループ
foreach my $ymd (sort keys %all_entries) {

    ### entry header
    my $ent_h = make_entry_header_html($all_entries{$ymd}{eh}, $ymd);

    ### item
    my @items;
    foreach my $i (sort {$b <=> $a} keys %{$all_entries{$ymd}}) {
	next if ($i !~ /^\d/);

	my $ih = make_item_header_html($all_entries{$ymd}{$i}{h}, $ymd."-".$i);

	### カテゴリ
	my $catstr = make_cat_link_html($all_entries{$ymd}{$i}{cat});

	### 日付リンクによるリファラー
	my @inside_refs = get_inside_ref("$ymd-$i");

	### item の基礎情報
	my $item_url = datestr2url("$ymd-$i");
	my $item_ymdi = $ymd."-".$i; 
#	my $item_id = $ymd.$i; $item_id =~ s/-//g; # Ex. "200309241"
	(my $item_id = $ymd.$i) =~ s/-//g; # Ex. "200309241"

	### item の組み上げ
	my $t = HTML::Template->new(scalarref => \$item_template,
				    die_on_bad_params => 0);

	my $ic = $all_entries{$ymd}{$i}{c};

	$t->param(content => $ic);
	$t->param(header => $ih);
	$t->param(cat => $catstr);
	$t->param(author => $all_entries{$ymd}{$i}{a});
	$t->param(referrer => join(" ", @inside_refs));
	$t->param(id => $item_id);
	$t->param(ymdi => $item_ymdi);
	$t->param(url => $item_url);
	my $this_item = $t->output();

	foreach (@{$all_entries{$ymd}{$i}{cat}}) {
	    push @{$category_item{$_}}, {eh=>$ent_h, cont=>$this_item};
	}
	push @items, $this_item;
    }

    my ($y, $m, $d) = ($ymd =~ /^(\d{4})-(\d\d)-(\d\d)$/);

    ### 他の年の同じ日付 (月日) へのリンクを張る
    my @same_dates;
    if ($same_date_jump == 1) {
	if (defined $entry_statistics{md}{"$m-$d"}) {
	    my @ys = sort keys %{$entry_statistics{md}{"$m-$d"}};
#	    print join(",",@ys)," $ymd\n";
	    @same_dates = map {"<a href=\"".datestr2url("$_-$m-$d").
				   "\">$_</a>"} grep {$_ != $y} @ys;
	}
    }

    ### 日付リンクによるリファラー
    my @inside_refs = get_inside_ref("$ymd");

    ### pragma item
    my $message_top = $all_entries{$ymd}{"message-top"};
    my $message_bottom = $all_entries{$ymd}{"message-bottom"};

    ### entry の基礎情報
    my $entry_url = datestr2url($ymd);
    my $entry_ymd = $ymd;
#    my $entry_id = $ymd; $entry_id =~ s/-//g; # Ex. "20030924"
    (my $entry_id = $ymd) =~ s/-//g; # Ex. "20030924"

    ### エントリの組み上げ
    my $t = HTML::Template->new(scalarref => \$entry_template,
				die_on_bad_params => 0);
    $t->param(header => $ent_h);
    $t->param(message_top => $message_top);
    $t->param(message_bottom => $message_bottom);
    $t->param(referrer => join(" ", @inside_refs));
    $t->param(same_date => join(" ", @same_dates));
    $t->param(id => $entry_id);
    $t->param(ymd => $entry_ymd);
    $t->param(url => $entry_url);
    $t->param(content => @{[join('', @items)]});

    $month_page{"$y-$m"}{$ymd}{str} = $t->output();
}

### HTML ファイルの出力
write_index_page();
write_month_page();
write_day_page() if ($day_page_mode or $page_mode >= 1);
write_item_page() if ($page_mode == 2);
write_category_page() if ($output_cat_pages);

print "done.\n" if (!defined $quiet_mode);

exit;


### エントリをパーズして格納する
sub parse_entry {
    my ($ymd, $ent) = @_;

    for (my $i = $ent->{curid}; $i >= 1; $i--) {
	if (0){
  	    print "-" x 60, "\n";
  	    print "ITEM ID: $ymd-$i\n";
  	    print "ITEM HEADER:>>>>",$ent->{$i}->{ho},"<<<<\n";
  	    print "ITEM CATEGORY:",join(",",@{$ent->{$i}->{cat}}),"\n"
  		if (defined $ent->{$i}->{cat});
  	    print "ITEM AUTHOR:>>>>",$ent->{$i}->{a},"<<<<\n";
  	    print "ITEM CONTENT:>>>>",$ent->{$i}->{co},"<<<<\n";
	}
	my $c = $ent->{$i}->{co};
	if ($use_h3_for_item_header == 1) {
	    $c =~ s/^\s*\n//g;
	}
	
	# 日付リンク情報の格納
	while ($c =~ /\[((\d\d\d\d-\d\d)-\d\d(-\d+)?)\]/g) {
	    $inside_ref{$1}{"$ymd-$i"}++;
	}

	# ハッシュに格納
	$ent->{$i}{h} = okikae($ent->{$i}{ho});
	$ent->{$i}{c} = okikae($c);
    }
    return;
}


### 文字列の置き換え
sub okikae {
    local ($_) = @_;	

    escape_string(\$_);

    s/&/&amp;/go;
    s/\]>/\]&gt;/go;
#    s/>/&gt;/go;		# > が &.. になると、URL とか引用のマッチ狂う
#    s/"/&quot;/go;		# ";
    ### "<" は置き換える。
    s|<(/?[a-z!]+)|&lt;$1|gio;
#    s|<(/?[a-z]+)|&lt;$1|gio;	# コメント (<!-- -->) をのこしたい場合はこれ
    # カスタマイズのヒント: <s></s> を残す→ 
    # s|<(/?[a-rt-z]+)|&lt;$1|gi; <b> を残す→ 
    # s|<(/?[ac-z]+)|&lt;$1|gi; (副作用 = <br> なども残る)

    ### 文字修飾と水平線。Hiki の記法を採用。
    s!'''(.+?)'''!<strong>$1</strong>!gms;
    s!''(.+?)''!<em>$1</em>!gms;
    s!==(\S.+?)==!<s>$1</s>!gms;
    s!^\-{4}!<hr>!gms;

    ### URL。Hiki の記法を採用。
    s!\[\[(.+?)\s*\|\s*(.+?)\]\]!get_link_str($1, $2)!gmse;

    ### 表。Hiki の記法を採用。
    s!(^(\|\|[^\n]+\n)+)!'<table><tr>'.
	(join("<tr>", (map {join('<td>', split(/\|\|/ ,$_))} split(/\n/, $1))))
	    .'</table>'!gsme;

    ### 引用 (quote): ">>" と "<<" で囲む
    s!^>>\n!<blockquote>!gm;
    s!^<<\n!</blockquote>!gm;

    ### 引用 (quote): "| ..." か "> ..."
    if ($remove_quote_mark == 1) {
	my $a;
	s!((^((\||>)[^\n]*)\n)+)!'<blockquote>'.($a = $1,
	    $a =~ s{^(\||>)\s?}{}gm, $a).'</blockquote>'!gme;
    } else {
	s!((^((\||>)[^\n]*)\n)+)!<blockquote>$1</blockquote>!gmx;
    }

    ### 日付で参照リンク
    # date ref : [YYYY-MM-DD]
    $_ = datestr2anchor($_);

    ### URL表記を href で
    # URL : http://....
    # 正規表現は http://www.din.or.jp/~ohzaki/perl.htm#httpURL より。
    # バックスラッシュを用いたURL中での改行に対応 021025
    #my $URLCHARS = "[-_.!~*'()a-zA-Z0-9;/?:@&=+,%\#\$]";
    my $URLCHARS = "[-_.!~*'a-zA-Z0-9;/?:@&=+,%\#\$]";
    my $URLDELIM = "\\\\\\n *";
    s{(?<![\"\=|])((s?https?|ftp)://($URLCHARS+)($URLDELIM($URLCHARS+))*)}
    {'<a href="'.join('', split(/$URLDELIM/, $1)).'">'.
	 join('', split(/\\/, $1)).'</a>'}gem; #")};

    ### 行頭のスペースは &nbsp; に置き換える。
    s!^( +)!{"&nbsp;" x length($1)}!gme;
    s!^(</?blockquote>)( +)!{"$1" . ("&nbsp;" x length($2))}!gme;

    ### 自動文字列置換適用
    eval $auto_replace;

    # 各行の行末に <br> を付ける
    # memo: 昔は pre で囲んでいたが、v0.23 からやめた
#print "1[$_]\n";
    s!$!<br>!gsm;
    s!<br>$!!;
#print "2[$_]\n";

    unescape_string(\$_);	# プラグイン呼び出しも行なう

    s!</pre><br>!</pre>!g;	# ad hoc

    return $_;
}


### カテゴリ別ページ(ex: cat_life.html)を作る。
sub write_category_page {
    my @cat_list = keys %category_item;

    foreach my $catname (@cat_list) {

        my @ents = sort {$b->{eh} cmp $a->{eh}} @{$category_item{$catname}};

        my $n = $cat_page_entry_max;
        my $num_of_old_pages = int(@ents / $n);

        my @fnames;
        for (my $i = 0; $i <= $num_of_old_pages; $i++) {
            $fnames[$i] = get_category_filename($catname);
            my $suffix = ($i == 0) ? "" : "-".($i+1);
            $fnames[$i] =~ s/\.html$/$suffix.html/;
        }

        for (my $i = 0; $i <= $num_of_old_pages; $i++) {

            ### ページの組み上げ
            my $t = HTML::Template->new(scalarref => \$cat_page_template,
                                        loop_context_vars => 1,
                                        die_on_bad_params => 0);
            $t->param(cl_name => $changelog_name);
            $t->param(css_file => $css_file);
            $t->param(lastupdate => $what_time_is_it_now);
            $t->param(signature => $signature);

            $t->param(cat_name => $catname);
            $t->param(ym => $current_ym);
            $t->param(day_list => $current_day_list);
            $t->param(latest_item_list => $latest_item_list);
            $t->param(category_list => $category_list);
            $t->param(entries => [grep /^.+$/, @ents[$i*$n...($i+1)*$n-1]]);

            my @page_list;
            my $back_page_url;
            my $next_page_url;
            if ($num_of_old_pages > 0) {
                for (my $j = 0; $j <= $num_of_old_pages; $j++) {
                    $page_list[$j] = ($i == $j) ? $j+1 : 
                        qq(<a href="$fnames[$j]">@{[$j+1]}</a>);
                    $back_page_url = $fnames[$j] if ($j == $i - 1);
                    $next_page_url = $fnames[$j] if ($j == $i + 1);
                }
            }

            $t->param(page_list => join(" ",@page_list));
            $t->param(first_page => $fnames[0]);
            $t->param(back => $back_page_url);
            $t->param(next => $next_page_url);
            $t->param(page_id => $i + 1);
            $t->param(page_num => $num_of_old_pages + 1);

            my $ostr = $t->output();

            ### ファイルに出力
            output_to_file("$outputdir/".$fnames[$i], \$ostr);
        }
    }
}


### アイテムページ(ex: 2001-01-01-1.html)を作る。
sub write_item_page {
    my @day_list = reverse sort keys %all_entries;

    for (my $idx = 0; $idx < @day_list; $idx++) {
	my ($ymd, $ym) = ($day_list[$idx] =~ /^((\d+-\d+)-\d+)/);
	my $ent = $all_entries{$ymd};

	for (my $i = $ent->{curid}; $i >= 1; $i--) {
	    my $item = $ent->{$i};
	    my $ymdi = "$ymd-$i";

	    ### カテゴリ
	    my $catstr = make_cat_link_html($all_entries{$ymd}{$i}{cat});

	    ### 日付リンクによるリファラー
	    my @inside_refs = get_inside_ref("$ymdi");

	    ### item の基礎情報
	    my $item_url = datestr2url("$ymdi");
	    my $item_ymdi = $ymdi; 
	    my $item_id = $ymdi; $item_id =~ s/-//g; # Ex. "200309241"

	    # 前後のページ
	    my $ymdi_before;
	    my $ymdi_after;
	    if ($i > 1) {
		$ymdi_before = $ymd."-".($i-1);
	    } elsif ($idx < @day_list - 1) {
		my $day_b = $day_list[$idx + 1];
		$ymdi_before = $day_b."-".$all_entries{$day_b}{curid};
	    }
	    if ($i != $ent->{curid}) {
		$ymdi_after = $ymd."-".($i+1);
	    } elsif ($idx > 0) {
		my $day_a = $day_list[$idx - 1];
		$ymdi_after = $day_a."-1";
	    }

	    ### ページの組み上げ
	    my $t = HTML::Template->new(scalarref => \$item_page_template,
					loop_context_vars => 1,
					die_on_bad_params => 0);

	    $t->param(cl_name => $changelog_name);
	    $t->param(css_file => $css_file);
	    $t->param(lastupdate => $what_time_is_it_now);
	    $t->param(signature => $signature);

	    $t->param(ymd => $ymd);
	    $t->param(ym => $ym);

	    $t->param(month_page_list => $month_page_list);
	    $t->param(latest_item_list => $latest_item_list);
	    $t->param(category_list => $category_list);
	    $t->param(back => $ymdi_before);
	    $t->param(next => $ymdi_after);

	    my $ccc = $item->{c}; $ccc =~ s!^<br>!!g;# ad hoc
	    $t->param(content => $ccc);
	    $t->param(header_text => $item->{ho});
	    $t->param(header => $item->{h});
	    $t->param(cat => $catstr);
	    $t->param(author => $item->{a});
	    $t->param(referrer => join(" ", @inside_refs));
	    $t->param(id => $item_id); # 200101011
	    $t->param(ymdi => $item_ymdi); # 2001-01-01-1
	    $t->param(url => $item_url); # 2001-01-01-1.html
	    
	    my $ostr = $t->output();

	    ### ファイルに出力
	    output_to_file("$outputdir/$ymdi.html", \$ostr);
	}
    }
}


### 日ページ(ex: 2001-01-01.html)を作る。
sub write_day_page {
    my @day_list = reverse sort keys %all_entries;

    for (my $idx = 0; $idx < @day_list; $idx++) {

	my ($ymd, $ym) = ($day_list[$idx] =~ /^((\d+-\d+)-\d+)/);

	# 前後の日ページ
	my $day_before = $day_list[$idx + 1] if ($idx < @day_list - 1);
	my $day_after = $day_list[$idx - 1] if ($idx > 0);

	# 日へのリンク (日付一覧)
	my $day_list = make_day_list_str($ym);

	### ページの組み上げ
	my $t = HTML::Template->new(scalarref => \$day_page_template,
				    loop_context_vars => 1,
				    die_on_bad_params => 0);
	$t->param(cl_name => $changelog_name);
	$t->param(css_file => $css_file);
	$t->param(lastupdate => $what_time_is_it_now);
	$t->param(signature => $signature);

	$t->param(ymd => $ymd);
	$t->param(ym => $ym);
	$t->param(day_list => $day_list);
	$t->param(month_page_list => $month_page_list);
	$t->param(latest_item_list => $latest_item_list);
	$t->param(category_list => $category_list);
	$t->param(back => $day_before);
	$t->param(next => $day_after);
	$t->param(content => $month_page{$ym}{$ymd}{str});

	my $ostr = $t->output();

	### ファイルに出力
	output_to_file("$outputdir/$ymd.html", \$ostr);
    }
}


### 月ページ(ex: 2001-01.html)を作る。
sub write_month_page {
    my @month_list = reverse sort keys %month_page;
    for (my $idx = 0; $idx < @month_list; $idx++) {
	my $ym = $month_list[$idx];

	# 前後の月
	my $m_before = $month_list[$idx + 1] if ($idx < @month_list - 1);
	my $m_after = $month_list[$idx - 1] if ($idx > 0);

	# 日付リンク一覧
	my $day_list = make_day_list_str($ym);

	### 日々のエントリ作成
	my @cont;
	if ($reverse_order_days) { # 降順: 日付の新しいのが上 (〜v0.11 と同じ)
	    @cont = reverse sort keys %{$month_page{$ym}};
	} else {		# 昇順: 日付の古いのが上
	    @cont = sort keys %{$month_page{$ym}};
	}
	my @contlist = map {{content => $month_page{$ym}{$_}{str}}} @cont;

	### ページの組み上げ
	my $t = HTML::Template->new(scalarref => \$month_page_template,
				    loop_context_vars => 1,
				    die_on_bad_params => 0);
	$t->param(cl_name => $changelog_name);
	$t->param(css_file => $css_file);
	$t->param(lastupdate => $what_time_is_it_now);
	$t->param(signature => $signature);

	$t->param(ym => $ym);
	$t->param(day_list => $day_list);
	$t->param(month_page_list => $month_page_list);
	$t->param(latest_item_list => $latest_item_list);
	$t->param(category_list => $category_list);
	$t->param(back => $m_before);
	$t->param(next => $m_after);
	$t->param(entries => \@contlist);

	my $ostr = $t->output();

	output_to_file("$outputdir/$ym.html", \$ostr);
    }
}


### インデックスページ(index.html)を作る
sub write_index_page {
    ### 最近の何日かだけインデックスページに載せるための処理
    my @recent = (reverse sort keys %all_entries)[0..$opt_topn];

    my @top_n_entries;

    for (my $i = 0; $i < $opt_topn and $recent[$i]; $i++) {
	my $ymd = $recent[$i];
	my ($ym, $d) = ($ymd =~ /^(\d{4}-\d\d)-(\d\d)$/);
#	$top_n_str .= $month_page{$ym}{$ymd}{str};
	push @top_n_entries, {content => $month_page{$ym}{$ymd}{str}};
    }
    my ($ymd, $ym, $d) = ($recent[0] =~ /^((\d{4}-\d\d)-(\d\d))$/);

    # 日付リンク一覧
    my $day_list = make_day_list_str($ym);

    ### ページの組み上げ
    my $t = HTML::Template->new(scalarref => \$index_page_template,
				loop_context_vars => 1,
				die_on_bad_params => 0);
    $t->param(cl_name => $changelog_name);
    $t->param(css_file => $css_file);
    $t->param(lastupdate => $what_time_is_it_now);
    $t->param(signature => $signature);

    $t->param(ymd => $ymd);	# 最新エントリの日付
    $t->param(ym => $ym);	# 最新エントリの月
    $t->param(ndays => $opt_topn);
    $t->param(day_list => $day_list);
    $t->param(month_page_list => $month_page_list);
    $t->param(latest_item_list => $latest_item_list);
    $t->param(category_list => $category_list);
    $t->param(entries => \@top_n_entries);

    my $ostr = $t->output();

    output_to_file("$outputdir/index.html", \$ostr);
}


### 月別一覧を作成
sub make_month_page_list {
    my ($month_page) = @_;
    my @month_list = sort keys %{$month_page};
    my ($start_year) = ($month_list[0] =~ /^(\d\d\d\d)/);
    my ($end_year) = ($month_list[$#month_list] =~ /^(\d\d\d\d)/);
    my $month_page_list = "";
    for (my $y = $end_year; $y >= $start_year; $y--) { # year loop
	$month_page_list .= "$y : ";
	for (my $m = 1; $m <= 12; $m++) { # month loop	
	    my $m0 = sprintf "%02d", $m;
	    if (defined $month_page->{"$y-$m0"}) {
		$month_page_list .= "<a href=\"$y-$m0.html\">$m0</a> ";
	    } else {
		$month_page_list .= "$m0 ";
	    }
	}
	$month_page_list .= "<br>\n";
    }
    return $month_page_list;
}


### 日付リンク一覧を作成 - 文字列を返す
sub make_day_list_str {	
    my ($ym) = @_;
    if ($calendar_style == 1) {
	return make_calendar_table($ym, make_day_list($ym));
    } else {
	return join(" ", @{make_day_list($ym)});
    }
}

# 日付リンク一覧を作成 - リストへのポインタを返す
my %daylist;
sub make_day_list {	
    my ($ym) = @_;
    my $lday = get_last_day_of_month($ym);
    return $daylist{$ym} if (defined $daylist{$ym}); # cache
    for (my $d = 1; $d <= $lday; $d++) {
	my $day = ($d < 10) ? "0".$d : $d;
	if (defined $all_entries{$ym."-".$day}) {
#	if (defined $entry_statistics{ymd}{$ym."-".$day}) {
	    my $day_url = datestr2url($ym."-".$day);
	    push @{$daylist{$ym}}, qq(<a href="$day_url">$day</a>);
	} else {
	    push @{$daylist{$ym}}, $day;
	}
    }
    return $daylist{$ym};
}

# 日付一覧を作成 - カレンダースタイル
sub make_calendar_table {
    my ($ym, $dlistp) = @_;
    my ($y, $m) = split("-", $ym);
    my $offset = (localtime timelocal(0, 0, 0, 1, $m - 1, $y))[6];
    
    my $week = 0;
    my @cal;
    for (my $i = 0; $i < 42; $i++) {
	my $day = ($i < $offset) ? " " : $dlistp->[$i - $offset];
	last if (not $day);
	$day =~ s/^0//;
	$day =~ s/>0([1-9])</>$1</;
	$cal[$week] .= qq(<td align="center">$day</td>);
	$week++ if (($i + 1) % 7 == 0);
    }

    my @wn = ("S", "M", "T", "W", "T", "F", "S");
#    my @wn = ("Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat");

    my $rv = << "CAL"
<table>
<caption><a href="$ym.html">$ym</a></caption>
<tr>
@{[join "", map {qq(<th align="center">$_</th>)} @wn]}
</tr>
@{[join "", map {"<tr>$_</tr>"} @cal]}
</table>
CAL
    ;

    return $rv;
}


### anchor, img タグ文字列を生成。
sub get_link_str {
    my ($a, $b) = @_;
    if ($a =~ /\.(jpg|jpeg|png|gif)$/i) { # [[http://nais.to/|image/nais.jpg]]
	return qq(<a href="$b"><img src="$a" alt="画像"></a>);
    } elsif ($b =~ /\.(jpg|jpeg|png|gif)$/i) { # [[自画像|image/sp.jpg]]
	return qq(<img src="$b" alt="$a">);
    } else {			# [[トップページ|http://nais.to/]]
	return qq(<a href="$b">$a</a>);
    }
}


### 年月日を入力とし曜日を出力する関数 since 021001
# RETURN VALUES
#     the text name of the day of the week.  Mon, Tue, Wed, ...
# EXAMPLES
#     get_day_of_week(1, 12, 2002), get_day_of_week("2002-12-01")
sub get_day_of_week {
    my ($d, $m, $y) = @_;
    ($y, $m, $d) = split("-", $d) unless (defined $m);
    my $WEEKDAY = (localtime timelocal(0, 0, 0, $d, $m - 1, $y))[6];
    return ("Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat")[$WEEKDAY];
}


### 年月を入力としその月の最終日を出力する関数 since 030105
# EXAMPLES
#     get_last_day_of_month(12, 2002), get_last_day_of_month("2002-12")
sub get_last_day_of_month {
    my ($m, $y) = @_;
    ($y, $m) = split("-", $m) unless (defined $y);
    return (31, ((($y % 4 == 0) and ($y % 100)) or ($y % 400 == 0)) ? 29 : 28,
	    31, 30, 31, 30, 31, 31, 30, 31, 30, 31)[$m - 1];
}


### RSS ファイルを出力する
sub write_rss_file {
    my $rdfseq;
    my $rdfitem;
    my $ctr = ($opt_topn > 7) ? 7 : $opt_topn;

    my @items;

    foreach my $ymd (sort {$b cmp $a} keys %all_entries) {
	$ctr--;
	last if ($ctr < 0);
	
	foreach my $i (sort {$b <=> $a} keys %{$all_entries{$ymd}}) {
	    next if ($i !~ /^\d/);

	    my $permlink = $clog_url_pref.datestr2url($ymd."-".$i);
	    my ($ym) = ($ymd =~ /^(\d{4}-\d\d)-\d\d/);

	    my $coen = $all_entries{$ymd}{$i}{c};
	    $coen =~ s!<a href="(\d.+?)"!<a href="$clog_url_pref$1"!g;
	    $coen =~ s!<img src="([^h].+?)"!<img src="$clog_url_pref$1"!g;

	    my $cont = $all_entries{$ymd}{$i}{c};
	    $cont = html2xmlstr($cont);
	    if ($cont =~ s/^(([\x00-\x7F]|[\x80-\xFF]{2}){300}).+$/$1/sm) {
		$cont =~ s/&[^;]*$//g; # &gt...$ でXMLパーズエラー
		$cont .= "...";
	    }

	    my $item_dcdate = ($dcdate =~ /^$ymd/) ? $dcdate : 
		$ymd."T23:59:59+9:00";

	    push @items, {
		permlink => $permlink,
		itemheader => html2xmlstr($all_entries{$ymd}{$i}{h}),
		itemauthor => $all_entries{$ymd}{$i}{a}, 
		itemcontent => $cont,
		itemcontentencoded => $coen,
		item_dcdate => $item_dcdate
	    };
	}
    }
    my $t = HTML::Template->new(scalarref => \$rss_template,
				die_on_bad_params => 0, gloval_vars => 1);
    $t->param(items => \@items);
    $t->param(changelog_name => $changelog_name);
    $t->param(dcdate => $dcdate);
    $t->param(changelog_description => $changelog_description);
    $t->param(clog_url => $clog_url);
    $t->param(clog_url_pref => $clog_url_pref);
    $t->param(generatoragent=>"http://nais.to/~yto/tools/chalow/?v=$version");
    my $ostr = Jcode->new($t->output())->utf8;
    output_to_file("$outputdir/cl.rdf", \$ostr);
}


sub html2xmlstr {
    local ($_) = @_;
    s/&nbsp;/ /g;
    s|<img.+?alt="(.*?)".*?>|[$1]|gosm;
    s/[\t\n]//g;
    s/[\x00-\x1f]+/ /g;
    s/\s\s+/ /g;
    s|<[^<>]+?>||gosm;
    s/&lt;/</go;
    s/&/&amp;/go; s/>/&gt;/go; s/</&lt;/go; s/\"/&quot;/go; # "いつもの４つ
    return $_;
}


### JavaScript feed ファイルを出力する
sub write_latest_item_list_file {

    ### 最近の記事
    my @lines;
    my $date;
    my $ctr = $latest_titles_num;
    foreach my $ymd (sort {$b cmp $a} keys %all_entries) {
	$ctr--;
	last if ($ctr < 0);
	foreach my $i (sort {$b <=> $a} keys %{$all_entries{$ymd}}) {
	    next if ($i !~ /^\d/);
	    my ($ym) = ($ymd =~ /^(\d{4}-\d\d)-\d\d/);
	    my $c = $all_entries{$ymd}{$i}{h};
            $c =~ s/[\t\n]//g;
	    $c =~ s/\s\s+/ /g;
	    $c =~ s/\s*$//;
            $c =~ s/<.+?>//g;
	    $c =~ s/^\*\s+//;
#	    $c =~ s/\'/&\#x27;/g;

	    if ($date ne $ymd) {
		push @lines, "<a href=\"".
		    $clog_url_pref.datestr2url("$ymd")."\">$ymd</a><br>";
		$date = $ymd;
	    }
	    push @lines, "- <a href=\"".
		$clog_url_pref.datestr2url("$ymd-$i")."\">$c</a><br>";
	}
    }

    my $ostr = join("\n", map {s/\'/&\#x27;/g; "document.writeln('".$_."');"}
		    @lines);
    output_to_file("$outputdir/cl.js", \$ostr);

    $latest_item_list = join("\n", @lines);

}


sub write_category_list_file {
    ### カテゴリ一覧
    return if ($output_cat_pages == 0 and $cat_page_cgi eq "");

    my @lines = ();
    foreach my $cat (sort keys %category_count) {
	my $n = $category_count{$cat};
#    foreach my $cat (sort keys %category_item) {
#	my $n = scalar(@{$category_item{$cat}});
	my $url;
	if ($output_cat_pages) {
	    $url = get_category_filename($cat);
	    $url = $clog_url_pref.$url;
	} else {
	    $url = $cat_page_cgi;
	    $url =~ s/%%CAT%%/urlencode($cat)/ge;
	    $url = $clog_url_pref.$url if ($url !~ /^http/);
	}
	push @lines, "- <a href=\"$url\">$cat</a> ($n)<br>";
    }

    my $ostr = join("\n", map {s/\'/&\#x27;/g; "document.writeln('".$_."');"}
		 @lines);
    output_to_file("$outputdir/cl-cat.js", \$ostr);

    $category_list = join("\n", @lines);
}


### 検索用ファイルを出力する
# clsearch.cgi 用のファイルを生成
sub write_itemlist_file {
    my $ostr;
    foreach my $ymd (sort {$b cmp $a} keys %all_entries) {
	foreach my $i (sort {$b <=> $a} keys %{$all_entries{$ymd}}) {
	    next if ($i !~ /^\d/);
	    my ($ym) = ($ymd =~ /^(\d{4}-\d\d)-\d\d/);
	    my $h = $all_entries{$ymd}{$i}{h}.
		((defined $all_entries{$ymd}{$i}{"cat"}) ?
		 join('', map {"[$_]"} @{$all_entries{$ymd}{$i}{"cat"}}) : "");
	    my $c = $h."\x01".$all_entries{$ymd}{$i}{c};
	    $c =~ s|<img.+?alt="(.*?)".*?>|[$1]|gosm;
            $c =~ s/[\t\n]//g;
	    $c =~ s/&nbsp;/ /g;
	    $c =~ s/\s\s+/ /g;
            $c =~ s/<.+?>//g;
	    $c =~ s/\x01/\t/;	# 超 ad hoc。やば
	    $ostr .= datestr2anchor("[$ymd-$i]")."\t$c\n";
	}
    }

    if (-e "$outputdir/cl.itemlist" and $stop_date != 0) { # 差分更新
	open(F, "$outputdir/cl.itemlist") or die;
	my $flag = 0;
	while (<F>) {
	    if ($flag == 0) {
		(/\[(\d+)-(\d+)-(\d+)-/);
		my $cdate = $1 * 10000 + $2 * 100 + $3;
		$flag = 1 if ($stop_date > $cdate);
	    }
	    $ostr .= $_ if ($flag);
	}
	close F;
	print "update ";
    }

    output_to_file("$outputdir/cl.itemlist", \$ostr);
}


### 日付で参照リンク
sub datestr2anchor {
    my ($d) = @_;
    if ($page_mode == 2) {	# アイテムモード
	$d =~ s!\[(\d{4}-\d\d-\d\d(-\d+)?)\]!<a href="$1.html">[$1]</a>!g;
    } elsif ($day_page_mode or $page_mode == 1) { # 日モード
	$d =~ s!\[((\d{4}-\d\d-\d\d)(-\d+)?)\]!<a href="$2.html#$1">[$1]</a>!g;
    } else {			# 月モード
	$d =~ s!\[((\d{4}-\d\d)-\d\d(-\d+)?)\]!<a href="$2.html#$1">[$1]</a>!g;
    }
    return $d;
}

sub datestr2url {
    my ($d) = @_;
    if ($page_mode == 2) {	# アイテムモード
	$d =~ s!(\d{4}-\d\d-\d\d(-\d+)?)!$1.html!;
    } elsif ($day_page_mode or $page_mode ==1) { # 日モード
	unless ($d =~ s!((\d{4}-\d\d-\d\d)-\d+)!$2.html\#$1!) {
	    $d =~ s!(\d{4}-\d\d-\d\d)!$1.html!;
	}
    } else {			# 月モード
	$d =~ s!((\d{4}-\d\d)-\d\d(-\d+)?)!$2.html#$1!;
    }
    return $d;
}


### 文字列置き換えから一時的に退避し、後に復帰させる
my $num_of_escaped_string;
my %escaped_string;
my $num_of_escaped_src;
my %escaped_src;
my $num_of_escaped_plugin;
my %escaped_plugin;

sub escape_string {
    my ($strp) = @_;

    ### HTML エスケープ - 文字列そのまま
    my $btag = '_HTML_START_\n'; # 開始マーク
    my $atag = '_HTML_END_\n'; # 終了マーク
    $num_of_escaped_string = 0;
    $$strp =~ s!$btag(.*?)$atag!
	$escaped_string{++$num_of_escaped_string} = $1,
	sprintf("\x5\x13%d\x3", $num_of_escaped_string)!gsmxe;
    $$strp =~ s!\[(literal|sic|esc)\](.*?)\[/\1\]!
	$escaped_string{++$num_of_escaped_string} = $2,
	sprintf("\x5\x13%d\x3", $num_of_escaped_string)!gsmxe;

    ### ソースエスケープ - "&" や "<" などを置換し pre を付ける
    $num_of_escaped_src = 0;
    $$strp =~ s!\[src\](.*?)\[/src\]!
	$escaped_src{++$num_of_escaped_src} = $1,
	$escaped_src{$num_of_escaped_src} =~ s/&/&amp;/g,
	$escaped_src{$num_of_escaped_src} =~ s/</&lt;/g,
	$escaped_src{$num_of_escaped_src} =~ s/>/&gt;/g,
	sprintf("\x6\x13%d\x3", $num_of_escaped_src)!gsmxe;

    ### プラグインエスケープ
    $num_of_escaped_plugin = 0;
    $$strp =~ s!{{(.*?)}}!
	$escaped_plugin{++$num_of_escaped_plugin} = $1,
	sprintf("\x7\x13%d\x3", $num_of_escaped_plugin)!gsmxe;
}

sub unescape_string {
    my ($strp) = @_;

    ### プラグインアンエスケープ - 実行！
    $$strp =~ s|\x7\x13(\d+)\x3|eval($escaped_plugin{$1})|ge;
    ### ソースアンエスケープ - pre 追加
    $$strp =~ s|\x6\x13(\d+)\x3|<pre>$escaped_src{$1}</pre>|g;
    ### HTML アンエスケープ
    $$strp =~ s|\x5\x13(\d+)\x3|$escaped_string{$1}|g;
}


### inside referrer のリンク作成
sub get_inside_ref {
    my ($id) = @_;
    if (defined $inside_ref{"$id"}) {
        return map {datestr2anchor("[".$_."]")} 
	(sort {$b cmp $a} keys %{$inside_ref{"$id"}});
    }
    return ();
}


### カテゴリページのファイル名を生成
sub get_category_filename {
    my ($cn) = @_;
    if ($cn =~ /[\x80-\xff]/) {
	$cn = Jcode->new($cn)->utf8;
    }
    $cn =~ s/([^0-9a-z_-])/unpack('H2', $1)/gei;
    $cn =~ tr/A-Z/a-z/;
    return "cat_$cn.html";
}


### エントリヘッダーの生成
sub make_entry_header_html {
    my ($eh, $ymd) = @_;
    if ($show_day_of_week == 1) { ### 日付の後ろをどうするか?
	# 曜日(Mon, Tue, ...)を追加: "2000-10-19" --> "2000-10-19 Thu"
	$eh .= " ".get_day_of_week($ymd);
    }
    return qq(<a name="$ymd" href="@{[datestr2url($ymd)]}">$eh</a>);
}


### アイテムヘッダーの生成
sub make_item_header_html {
    my ($ih, $ymdi) = @_;
    # 前に足すもの
    my $ihb = "";
    if ($item_header_style == 0 or $item_header_style == 1) {
	$ihb = $item_header_mark;
	if ($use_item_anchor == 1) {
	    my $day_url = datestr2url($ymdi);
	    $ihb = qq(<a name="$ymdi" href="$day_url">$ihb</a>);
	}
	$ihb .= " ";
    }

    # タグで囲む
    $ih = qq($ihb<span class="clitemheader">$ih</span>);
    # 後ろに足すもの
    if ($item_header_style == 0 or $item_header_style == 2) {
	$ih .= ":";
    }
    return $ih;
}


### make category link(anchor) string for item header
sub make_cat_link_html {
    my ($catp) = @_;
    my $catstr;
    if (defined $catp) {
	if ($output_cat_pages) {
	    $catstr = 
		join("", map 
		     {"[<a href=\"".get_category_filename($_)."\">$_</a>]"}
		     @$catp);
	} elsif ($cat_page_cgi eq "") {
	    $catstr = join("", map {"[".$_."]"} @$catp);
	} else {
	    $catstr = 
		join("", map 
		     {my $tmp = $cat_page_cgi;
		      $tmp =~ s/%%CAT%%/urlencode($_)/ge;
		      "[<a href=\"$tmp\">$_</a>]"}
		     @$catp);
	}
	
    }
    return $catstr;
}    


### 指定されたファイルへ文字列を出力
sub output_to_file {
    my ($fname, $contp) = @_;
    $$contp =~ s/<!-- ReplaceOnce -->/$replace_once/;

    if ($update_by_size == 1 and -s $fname == length($$contp)) {
	return;
    }
    print "output to \"$fname\"\n" if (!defined $quiet_mode);
    open(F, "> $fname") || die "$fname: $!\n";
    binmode(F);
    print F $$contp;
    close(F);
}

### URL ENCODE
sub urlencode {
    local ($_) = @_;
    s/([^ \n\.\*\-_A-Z0-9])/sprintf("%%%02lX",unpack("C",$1))/gie;
    s/ /+/g;
    return $_;
}

